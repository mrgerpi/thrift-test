/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "calculate_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace calculator {

int _kOPTypeValues[] = {
  OPType::ADD,
  OPType::SUB,
  OPType::MUL,
  OPType::DIV
};
const char* _kOPTypeNames[] = {
  "ADD",
  "SUB",
  "MUL",
  "DIV"
};
const std::map<int, const char*> _OPType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(4, _kOPTypeValues, _kOPTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));


CalcilateRequest::~CalcilateRequest() throw() {
}


void CalcilateRequest::__set_left(const int32_t val) {
  this->left = val;
}

void CalcilateRequest::__set_right(const int32_t val) {
  this->right = val;
}

void CalcilateRequest::__set_op(const OPType::type val) {
  this->op = val;
}

const char* CalcilateRequest::ascii_fingerprint = "3C6B5910B2C7A8886AEC90D855401773";
const uint8_t CalcilateRequest::binary_fingerprint[16] = {0x3C,0x6B,0x59,0x10,0xB2,0xC7,0xA8,0x88,0x6A,0xEC,0x90,0xD8,0x55,0x40,0x17,0x73};

uint32_t CalcilateRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_left = false;
  bool isset_right = false;
  bool isset_op = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->left);
          isset_left = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->right);
          isset_right = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast0;
          xfer += iprot->readI32(ecast0);
          this->op = (OPType::type)ecast0;
          isset_op = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_left)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_right)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_op)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t CalcilateRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("CalcilateRequest");

  xfer += oprot->writeFieldBegin("left", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->left);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("right", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->right);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("op", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((int32_t)this->op);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(CalcilateRequest &a, CalcilateRequest &b) {
  using ::std::swap;
  swap(a.left, b.left);
  swap(a.right, b.right);
  swap(a.op, b.op);
}

CalcilateRequest::CalcilateRequest(const CalcilateRequest& other1) {
  left = other1.left;
  right = other1.right;
  op = other1.op;
}
CalcilateRequest& CalcilateRequest::operator=(const CalcilateRequest& other2) {
  left = other2.left;
  right = other2.right;
  op = other2.op;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const CalcilateRequest& obj) {
  using apache::thrift::to_string;
  out << "CalcilateRequest(";
  out << "left=" << to_string(obj.left);
  out << ", " << "right=" << to_string(obj.right);
  out << ", " << "op=" << to_string(obj.op);
  out << ")";
  return out;
}


CalculateResponse::~CalculateResponse() throw() {
}


void CalculateResponse::__set_errorCode(const int32_t val) {
  this->errorCode = val;
}

void CalculateResponse::__set_errorMsg(const std::string& val) {
  this->errorMsg = val;
}

void CalculateResponse::__set_result(const int32_t val) {
  this->result = val;
}

const char* CalculateResponse::ascii_fingerprint = "52C6DAB6CF51AF617111F6D3964C6503";
const uint8_t CalculateResponse::binary_fingerprint[16] = {0x52,0xC6,0xDA,0xB6,0xCF,0x51,0xAF,0x61,0x71,0x11,0xF6,0xD3,0x96,0x4C,0x65,0x03};

uint32_t CalculateResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_errorCode = false;
  bool isset_errorMsg = false;
  bool isset_result = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->errorCode);
          isset_errorCode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->errorMsg);
          isset_errorMsg = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->result);
          isset_result = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_errorCode)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_errorMsg)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_result)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t CalculateResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("CalculateResponse");

  xfer += oprot->writeFieldBegin("errorCode", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->errorCode);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("errorMsg", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->errorMsg);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("result", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->result);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(CalculateResponse &a, CalculateResponse &b) {
  using ::std::swap;
  swap(a.errorCode, b.errorCode);
  swap(a.errorMsg, b.errorMsg);
  swap(a.result, b.result);
}

CalculateResponse::CalculateResponse(const CalculateResponse& other3) {
  errorCode = other3.errorCode;
  errorMsg = other3.errorMsg;
  result = other3.result;
}
CalculateResponse& CalculateResponse::operator=(const CalculateResponse& other4) {
  errorCode = other4.errorCode;
  errorMsg = other4.errorMsg;
  result = other4.result;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const CalculateResponse& obj) {
  using apache::thrift::to_string;
  out << "CalculateResponse(";
  out << "errorCode=" << to_string(obj.errorCode);
  out << ", " << "errorMsg=" << to_string(obj.errorMsg);
  out << ", " << "result=" << to_string(obj.result);
  out << ")";
  return out;
}

} // namespace
