/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "thrift_test_kernal_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace thrift_test_kernal {

int _kServiceTypeValues[] = {
  ServiceType::Client,
  ServiceType::Server
};
const char* _kServiceTypeNames[] = {
  "Client",
  "Server"
};
const std::map<int, const char*> _ServiceType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kServiceTypeValues, _kServiceTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));


GetServiceListRequest::~GetServiceListRequest() throw() {
}


void GetServiceListRequest::__set_type(const ServiceType::type val) {
  this->type = val;
}

const char* GetServiceListRequest::ascii_fingerprint = "8BBB3D0C3B370CB38F2D1340BB79F0AA";
const uint8_t GetServiceListRequest::binary_fingerprint[16] = {0x8B,0xBB,0x3D,0x0C,0x3B,0x37,0x0C,0xB3,0x8F,0x2D,0x13,0x40,0xBB,0x79,0xF0,0xAA};

uint32_t GetServiceListRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_type = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast0;
          xfer += iprot->readI32(ecast0);
          this->type = (ServiceType::type)ecast0;
          isset_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_type)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t GetServiceListRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("GetServiceListRequest");

  xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(GetServiceListRequest &a, GetServiceListRequest &b) {
  using ::std::swap;
  swap(a.type, b.type);
}

GetServiceListRequest::GetServiceListRequest(const GetServiceListRequest& other1) {
  type = other1.type;
}
GetServiceListRequest& GetServiceListRequest::operator=(const GetServiceListRequest& other2) {
  type = other2.type;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const GetServiceListRequest& obj) {
  using apache::thrift::to_string;
  out << "GetServiceListRequest(";
  out << "type=" << to_string(obj.type);
  out << ")";
  return out;
}


GetServiceListResponse::~GetServiceListResponse() throw() {
}


void GetServiceListResponse::__set_errorCode(const int32_t val) {
  this->errorCode = val;
}

void GetServiceListResponse::__set_instanceList(const std::vector<std::string> & val) {
  this->instanceList = val;
}

const char* GetServiceListResponse::ascii_fingerprint = "B8D94EBFFE99C6E7010418EB2DF36DC3";
const uint8_t GetServiceListResponse::binary_fingerprint[16] = {0xB8,0xD9,0x4E,0xBF,0xFE,0x99,0xC6,0xE7,0x01,0x04,0x18,0xEB,0x2D,0xF3,0x6D,0xC3};

uint32_t GetServiceListResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_errorCode = false;
  bool isset_instanceList = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->errorCode);
          isset_errorCode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->instanceList.clear();
            uint32_t _size3;
            ::apache::thrift::protocol::TType _etype6;
            xfer += iprot->readListBegin(_etype6, _size3);
            this->instanceList.resize(_size3);
            uint32_t _i7;
            for (_i7 = 0; _i7 < _size3; ++_i7)
            {
              xfer += iprot->readString(this->instanceList[_i7]);
            }
            xfer += iprot->readListEnd();
          }
          isset_instanceList = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_errorCode)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_instanceList)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t GetServiceListResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("GetServiceListResponse");

  xfer += oprot->writeFieldBegin("errorCode", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->errorCode);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("instanceList", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->instanceList.size()));
    std::vector<std::string> ::const_iterator _iter8;
    for (_iter8 = this->instanceList.begin(); _iter8 != this->instanceList.end(); ++_iter8)
    {
      xfer += oprot->writeString((*_iter8));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(GetServiceListResponse &a, GetServiceListResponse &b) {
  using ::std::swap;
  swap(a.errorCode, b.errorCode);
  swap(a.instanceList, b.instanceList);
}

GetServiceListResponse::GetServiceListResponse(const GetServiceListResponse& other9) {
  errorCode = other9.errorCode;
  instanceList = other9.instanceList;
}
GetServiceListResponse& GetServiceListResponse::operator=(const GetServiceListResponse& other10) {
  errorCode = other10.errorCode;
  instanceList = other10.instanceList;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const GetServiceListResponse& obj) {
  using apache::thrift::to_string;
  out << "GetServiceListResponse(";
  out << "errorCode=" << to_string(obj.errorCode);
  out << ", " << "instanceList=" << to_string(obj.instanceList);
  out << ")";
  return out;
}


AddServiceRequest::~AddServiceRequest() throw() {
}


void AddServiceRequest::__set_type(const ServiceType::type val) {
  this->type = val;
}

void AddServiceRequest::__set_serviceName(const std::string& val) {
  this->serviceName = val;
}

void AddServiceRequest::__set_version(const std::string& val) {
  this->version = val;
}

void AddServiceRequest::__set_idlAbsFileName(const std::string& val) {
  this->idlAbsFileName = val;
}

const char* AddServiceRequest::ascii_fingerprint = "EC8C8E8D6042A67E4AF0F04DA3F39A73";
const uint8_t AddServiceRequest::binary_fingerprint[16] = {0xEC,0x8C,0x8E,0x8D,0x60,0x42,0xA6,0x7E,0x4A,0xF0,0xF0,0x4D,0xA3,0xF3,0x9A,0x73};

uint32_t AddServiceRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_type = false;
  bool isset_serviceName = false;
  bool isset_version = false;
  bool isset_idlAbsFileName = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast11;
          xfer += iprot->readI32(ecast11);
          this->type = (ServiceType::type)ecast11;
          isset_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->serviceName);
          isset_serviceName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->version);
          isset_version = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->idlAbsFileName);
          isset_idlAbsFileName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_type)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_serviceName)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_version)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_idlAbsFileName)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t AddServiceRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("AddServiceRequest");

  xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("serviceName", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->serviceName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("version", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->version);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("idlAbsFileName", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->idlAbsFileName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(AddServiceRequest &a, AddServiceRequest &b) {
  using ::std::swap;
  swap(a.type, b.type);
  swap(a.serviceName, b.serviceName);
  swap(a.version, b.version);
  swap(a.idlAbsFileName, b.idlAbsFileName);
}

AddServiceRequest::AddServiceRequest(const AddServiceRequest& other12) {
  type = other12.type;
  serviceName = other12.serviceName;
  version = other12.version;
  idlAbsFileName = other12.idlAbsFileName;
}
AddServiceRequest& AddServiceRequest::operator=(const AddServiceRequest& other13) {
  type = other13.type;
  serviceName = other13.serviceName;
  version = other13.version;
  idlAbsFileName = other13.idlAbsFileName;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const AddServiceRequest& obj) {
  using apache::thrift::to_string;
  out << "AddServiceRequest(";
  out << "type=" << to_string(obj.type);
  out << ", " << "serviceName=" << to_string(obj.serviceName);
  out << ", " << "version=" << to_string(obj.version);
  out << ", " << "idlAbsFileName=" << to_string(obj.idlAbsFileName);
  out << ")";
  return out;
}


AddServiceResponse::~AddServiceResponse() throw() {
}


void AddServiceResponse::__set_errorCode(const int32_t val) {
  this->errorCode = val;
}

const char* AddServiceResponse::ascii_fingerprint = "E86CACEB22240450EDCBEFC3A83970E4";
const uint8_t AddServiceResponse::binary_fingerprint[16] = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};

uint32_t AddServiceResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_errorCode = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->errorCode);
          isset_errorCode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_errorCode)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t AddServiceResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("AddServiceResponse");

  xfer += oprot->writeFieldBegin("errorCode", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->errorCode);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(AddServiceResponse &a, AddServiceResponse &b) {
  using ::std::swap;
  swap(a.errorCode, b.errorCode);
}

AddServiceResponse::AddServiceResponse(const AddServiceResponse& other14) {
  errorCode = other14.errorCode;
}
AddServiceResponse& AddServiceResponse::operator=(const AddServiceResponse& other15) {
  errorCode = other15.errorCode;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const AddServiceResponse& obj) {
  using apache::thrift::to_string;
  out << "AddServiceResponse(";
  out << "errorCode=" << to_string(obj.errorCode);
  out << ")";
  return out;
}


FillDataRequest::~FillDataRequest() throw() {
}


void FillDataRequest::__set_type(const ServiceType::type val) {
  this->type = val;
}

void FillDataRequest::__set_serviceName(const std::string& val) {
  this->serviceName = val;
}

void FillDataRequest::__set_methodName(const std::string& val) {
  this->methodName = val;
}

void FillDataRequest::__set_data(const std::string& val) {
  this->data = val;
}

const char* FillDataRequest::ascii_fingerprint = "EC8C8E8D6042A67E4AF0F04DA3F39A73";
const uint8_t FillDataRequest::binary_fingerprint[16] = {0xEC,0x8C,0x8E,0x8D,0x60,0x42,0xA6,0x7E,0x4A,0xF0,0xF0,0x4D,0xA3,0xF3,0x9A,0x73};

uint32_t FillDataRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_type = false;
  bool isset_serviceName = false;
  bool isset_methodName = false;
  bool isset_data = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast16;
          xfer += iprot->readI32(ecast16);
          this->type = (ServiceType::type)ecast16;
          isset_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->serviceName);
          isset_serviceName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->methodName);
          isset_methodName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->data);
          isset_data = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_type)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_serviceName)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_methodName)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_data)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t FillDataRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("FillDataRequest");

  xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("serviceName", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->serviceName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("methodName", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->methodName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("data", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->data);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(FillDataRequest &a, FillDataRequest &b) {
  using ::std::swap;
  swap(a.type, b.type);
  swap(a.serviceName, b.serviceName);
  swap(a.methodName, b.methodName);
  swap(a.data, b.data);
}

FillDataRequest::FillDataRequest(const FillDataRequest& other17) {
  type = other17.type;
  serviceName = other17.serviceName;
  methodName = other17.methodName;
  data = other17.data;
}
FillDataRequest& FillDataRequest::operator=(const FillDataRequest& other18) {
  type = other18.type;
  serviceName = other18.serviceName;
  methodName = other18.methodName;
  data = other18.data;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const FillDataRequest& obj) {
  using apache::thrift::to_string;
  out << "FillDataRequest(";
  out << "type=" << to_string(obj.type);
  out << ", " << "serviceName=" << to_string(obj.serviceName);
  out << ", " << "methodName=" << to_string(obj.methodName);
  out << ", " << "data=" << to_string(obj.data);
  out << ")";
  return out;
}


FillDataResponse::~FillDataResponse() throw() {
}


void FillDataResponse::__set_errorCode(const int32_t val) {
  this->errorCode = val;
}

const char* FillDataResponse::ascii_fingerprint = "E86CACEB22240450EDCBEFC3A83970E4";
const uint8_t FillDataResponse::binary_fingerprint[16] = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};

uint32_t FillDataResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_errorCode = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->errorCode);
          isset_errorCode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_errorCode)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t FillDataResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("FillDataResponse");

  xfer += oprot->writeFieldBegin("errorCode", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->errorCode);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(FillDataResponse &a, FillDataResponse &b) {
  using ::std::swap;
  swap(a.errorCode, b.errorCode);
}

FillDataResponse::FillDataResponse(const FillDataResponse& other19) {
  errorCode = other19.errorCode;
}
FillDataResponse& FillDataResponse::operator=(const FillDataResponse& other20) {
  errorCode = other20.errorCode;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const FillDataResponse& obj) {
  using apache::thrift::to_string;
  out << "FillDataResponse(";
  out << "errorCode=" << to_string(obj.errorCode);
  out << ")";
  return out;
}


RequestTriggerRequest::~RequestTriggerRequest() throw() {
}


void RequestTriggerRequest::__set_serviceName(const std::string& val) {
  this->serviceName = val;
}

void RequestTriggerRequest::__set_methodName(const std::string& val) {
  this->methodName = val;
}

const char* RequestTriggerRequest::ascii_fingerprint = "07A9615F837F7D0A952B595DD3020972";
const uint8_t RequestTriggerRequest::binary_fingerprint[16] = {0x07,0xA9,0x61,0x5F,0x83,0x7F,0x7D,0x0A,0x95,0x2B,0x59,0x5D,0xD3,0x02,0x09,0x72};

uint32_t RequestTriggerRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_serviceName = false;
  bool isset_methodName = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->serviceName);
          isset_serviceName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->methodName);
          isset_methodName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_serviceName)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_methodName)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t RequestTriggerRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("RequestTriggerRequest");

  xfer += oprot->writeFieldBegin("serviceName", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->serviceName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("methodName", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->methodName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(RequestTriggerRequest &a, RequestTriggerRequest &b) {
  using ::std::swap;
  swap(a.serviceName, b.serviceName);
  swap(a.methodName, b.methodName);
}

RequestTriggerRequest::RequestTriggerRequest(const RequestTriggerRequest& other21) {
  serviceName = other21.serviceName;
  methodName = other21.methodName;
}
RequestTriggerRequest& RequestTriggerRequest::operator=(const RequestTriggerRequest& other22) {
  serviceName = other22.serviceName;
  methodName = other22.methodName;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const RequestTriggerRequest& obj) {
  using apache::thrift::to_string;
  out << "RequestTriggerRequest(";
  out << "serviceName=" << to_string(obj.serviceName);
  out << ", " << "methodName=" << to_string(obj.methodName);
  out << ")";
  return out;
}


RequestTriggerResponse::~RequestTriggerResponse() throw() {
}


void RequestTriggerResponse::__set_errorCode(const int32_t val) {
  this->errorCode = val;
}

void RequestTriggerResponse::__set_reqponseJson(const std::string& val) {
  this->reqponseJson = val;
}

const char* RequestTriggerResponse::ascii_fingerprint = "3F5FC93B338687BC7235B1AB103F47B3";
const uint8_t RequestTriggerResponse::binary_fingerprint[16] = {0x3F,0x5F,0xC9,0x3B,0x33,0x86,0x87,0xBC,0x72,0x35,0xB1,0xAB,0x10,0x3F,0x47,0xB3};

uint32_t RequestTriggerResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_errorCode = false;
  bool isset_reqponseJson = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->errorCode);
          isset_errorCode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->reqponseJson);
          isset_reqponseJson = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_errorCode)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_reqponseJson)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t RequestTriggerResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("RequestTriggerResponse");

  xfer += oprot->writeFieldBegin("errorCode", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->errorCode);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("reqponseJson", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->reqponseJson);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(RequestTriggerResponse &a, RequestTriggerResponse &b) {
  using ::std::swap;
  swap(a.errorCode, b.errorCode);
  swap(a.reqponseJson, b.reqponseJson);
}

RequestTriggerResponse::RequestTriggerResponse(const RequestTriggerResponse& other23) {
  errorCode = other23.errorCode;
  reqponseJson = other23.reqponseJson;
}
RequestTriggerResponse& RequestTriggerResponse::operator=(const RequestTriggerResponse& other24) {
  errorCode = other24.errorCode;
  reqponseJson = other24.reqponseJson;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const RequestTriggerResponse& obj) {
  using apache::thrift::to_string;
  out << "RequestTriggerResponse(";
  out << "errorCode=" << to_string(obj.errorCode);
  out << ", " << "reqponseJson=" << to_string(obj.reqponseJson);
  out << ")";
  return out;
}

} // namespace
