
//This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "ThriftTestKernelService.h"
#include "ThriftTestKernelServiceHandler.h"
#include "simple_log.h"
#include "ServiceManager.h"

#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>
#include <thrift/TToString.h>
#include <string>
#include <vector>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

using namespace  ::thrift_test_kernel;
using namespace  std;

ThriftTestKernelServiceHandler::ThriftTestKernelServiceHandler() 
{
	serviceMgr = new ServiceManager();
}

ThriftTestKernelServiceHandler::~ThriftTestKernelServiceHandler() 
{
	if (serviceMgr != NULL) {
		delete serviceMgr;
	}
}


void ThriftTestKernelServiceHandler::GetServiceList(GetServiceListResponse& _return, const GetServiceListRequest& request) {
	// Your implementation goes here
	log_info("GetServiceList");
	_return.__set_errorCode(0);
	vector<string> res;
	res.push_back("service1");
	res.push_back("service2");
	res.push_back("service3");
	_return.__set_instanceList(res);
}

void ThriftTestKernelServiceHandler::AddService(AddServiceResponse& _return, const AddServiceRequest& request) {
	// Your implementation goes here
	using apache::thrift::to_string;
	log_info("ThriftTestKernelServiceHandler::AddService||entry||req=%s", to_string(request).c_str());
	if (request.type == ServiceType::Client && request.__isset.ip == false) {
		log_error("ThriftTestKernelServiceHandler::AddService||req.type=Client||req.__isset.ip == false");
		_return.__set_errorCode(2);
		return;
	}
	int ret = serviceMgr->addService(request);
	_return.__set_errorCode(ret);
	log_info("ThriftTestKernelServiceHandler::AddService||exit||rsp=%s", to_string(_return).c_str());
}

void ThriftTestKernelServiceHandler::FillData(FillDataResponse& _return, const FillDataRequest& request) {
	// Your implementation goes here
	log_info("FillData");
	_return.__set_errorCode(0);
}

void ThriftTestKernelServiceHandler::RequestTrigger(RequestTriggerResponse& _return, const RequestTriggerRequest& request) {
	// Your implementation goes here
	log_info("RequestTrigger");
	_return.__set_errorCode(0);
	_return.__set_reqponseJson("ok");
}

