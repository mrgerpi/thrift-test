/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "hotspot_api_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace hotspot { namespace service {

int _kTextTypeValues[] = {
  TextType::EMPTY,
  TextType::COMMON,
  TextType::SPACIAL
};
const char* _kTextTypeNames[] = {
  "EMPTY",
  "COMMON",
  "SPACIAL"
};
const std::map<int, const char*> _TextType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kTextTypeValues, _kTextTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));


Trace::~Trace() throw() {
}


void Trace::__set_logId(const std::string& val) {
  this->logId = val;
}

void Trace::__set_caller(const std::string& val) {
  this->caller = val;
}

void Trace::__set_spanId(const std::string& val) {
  this->spanId = val;
__isset.spanId = true;
}

void Trace::__set_srcMethod(const std::string& val) {
  this->srcMethod = val;
__isset.srcMethod = true;
}

void Trace::__set_hintCode(const int64_t val) {
  this->hintCode = val;
__isset.hintCode = true;
}

void Trace::__set_hintContent(const std::string& val) {
  this->hintContent = val;
__isset.hintContent = true;
}

const char* Trace::ascii_fingerprint = "8D476629BDA99AC6FA462DCC7E29B166";
const uint8_t Trace::binary_fingerprint[16] = {0x8D,0x47,0x66,0x29,0xBD,0xA9,0x9A,0xC6,0xFA,0x46,0x2D,0xCC,0x7E,0x29,0xB1,0x66};

uint32_t Trace::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_logId = false;
  bool isset_caller = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->logId);
          isset_logId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->caller);
          isset_caller = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->spanId);
          this->__isset.spanId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->srcMethod);
          this->__isset.srcMethod = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->hintCode);
          this->__isset.hintCode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->hintContent);
          this->__isset.hintContent = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_logId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_caller)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t Trace::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("Trace");

  xfer += oprot->writeFieldBegin("logId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->logId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("caller", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->caller);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.spanId) {
    xfer += oprot->writeFieldBegin("spanId", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->spanId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.srcMethod) {
    xfer += oprot->writeFieldBegin("srcMethod", ::apache::thrift::protocol::T_STRING, 4);
    xfer += oprot->writeString(this->srcMethod);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.hintCode) {
    xfer += oprot->writeFieldBegin("hintCode", ::apache::thrift::protocol::T_I64, 5);
    xfer += oprot->writeI64(this->hintCode);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.hintContent) {
    xfer += oprot->writeFieldBegin("hintContent", ::apache::thrift::protocol::T_STRING, 6);
    xfer += oprot->writeString(this->hintContent);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(Trace &a, Trace &b) {
  using ::std::swap;
  swap(a.logId, b.logId);
  swap(a.caller, b.caller);
  swap(a.spanId, b.spanId);
  swap(a.srcMethod, b.srcMethod);
  swap(a.hintCode, b.hintCode);
  swap(a.hintContent, b.hintContent);
  swap(a.__isset, b.__isset);
}

Trace::Trace(const Trace& other0) {
  logId = other0.logId;
  caller = other0.caller;
  spanId = other0.spanId;
  srcMethod = other0.srcMethod;
  hintCode = other0.hintCode;
  hintContent = other0.hintContent;
  __isset = other0.__isset;
}
Trace& Trace::operator=(const Trace& other1) {
  logId = other1.logId;
  caller = other1.caller;
  spanId = other1.spanId;
  srcMethod = other1.srcMethod;
  hintCode = other1.hintCode;
  hintContent = other1.hintContent;
  __isset = other1.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const Trace& obj) {
  using apache::thrift::to_string;
  out << "Trace(";
  out << "logId=" << to_string(obj.logId);
  out << ", " << "caller=" << to_string(obj.caller);
  out << ", " << "spanId="; (obj.__isset.spanId ? (out << to_string(obj.spanId)) : (out << "<null>"));
  out << ", " << "srcMethod="; (obj.__isset.srcMethod ? (out << to_string(obj.srcMethod)) : (out << "<null>"));
  out << ", " << "hintCode="; (obj.__isset.hintCode ? (out << to_string(obj.hintCode)) : (out << "<null>"));
  out << ", " << "hintContent="; (obj.__isset.hintContent ? (out << to_string(obj.hintContent)) : (out << "<null>"));
  out << ")";
  return out;
}


HotspotRequest::~HotspotRequest() throw() {
}


void HotspotRequest::__set_product_id(const std::string& val) {
  this->product_id = val;
}

void HotspotRequest::__set_acc_key(const std::string& val) {
  this->acc_key = val;
}

void HotspotRequest::__set_app_version(const std::string& val) {
  this->app_version = val;
}

void HotspotRequest::__set_sdk_type(const std::string& val) {
  this->sdk_type = val;
}

void HotspotRequest::__set_client_type(const std::string& val) {
  this->client_type = val;
}

void HotspotRequest::__set_phone(const std::string& val) {
  this->phone = val;
}

void HotspotRequest::__set_pid(const std::string& val) {
  this->pid = val;
}

void HotspotRequest::__set_cur_lng(const double val) {
  this->cur_lng = val;
}

void HotspotRequest::__set_cur_lat(const double val) {
  this->cur_lat = val;
}

void HotspotRequest::__set_start_uid(const std::string& val) {
  this->start_uid = val;
__isset.start_uid = true;
}

void HotspotRequest::__set_start_lng(const double val) {
  this->start_lng = val;
}

void HotspotRequest::__set_start_lat(const double val) {
  this->start_lat = val;
}

void HotspotRequest::__set_start_type(const std::string& val) {
  this->start_type = val;
}

void HotspotRequest::__set_start_name(const std::string& val) {
  this->start_name = val;
}

void HotspotRequest::__set_start_address(const std::string& val) {
  this->start_address = val;
}

void HotspotRequest::__set_dest_uid(const std::string& val) {
  this->dest_uid = val;
__isset.dest_uid = true;
}

void HotspotRequest::__set_dest_lng(const double val) {
  this->dest_lng = val;
}

void HotspotRequest::__set_dest_lat(const double val) {
  this->dest_lat = val;
}

void HotspotRequest::__set_dest_type(const std::string& val) {
  this->dest_type = val;
__isset.dest_type = true;
}

void HotspotRequest::__set_dest_name(const std::string& val) {
  this->dest_name = val;
}

void HotspotRequest::__set_dest_address(const std::string& val) {
  this->dest_address = val;
}

void HotspotRequest::__set_cur_step(const int32_t val) {
  this->cur_step = val;
}

void HotspotRequest::__set_traceid(const std::string& val) {
  this->traceid = val;
__isset.traceid = true;
}

void HotspotRequest::__set_spanid(const std::string& val) {
  this->spanid = val;
__isset.spanid = true;
}

void HotspotRequest::__set_extends_info(const std::string& val) {
  this->extends_info = val;
__isset.extends_info = true;
}

void HotspotRequest::__set_city_id(const int32_t val) {
  this->city_id = val;
__isset.city_id = true;
}

void HotspotRequest::__set_lang(const std::string& val) {
  this->lang = val;
__isset.lang = true;
}

void HotspotRequest::__set_seat_num_needed(const int32_t val) {
  this->seat_num_needed = val;
__isset.seat_num_needed = true;
}

void HotspotRequest::__set_extMap(const std::map<std::string, std::string> & val) {
  this->extMap = val;
__isset.extMap = true;
}

void HotspotRequest::__set_bubble_pid(const std::string& val) {
  this->bubble_pid = val;
__isset.bubble_pid = true;
}

void HotspotRequest::__set_station_id(const std::string& val) {
  this->station_id = val;
__isset.station_id = true;
}

void HotspotRequest::__set_start_broadcast_time(const int32_t val) {
  this->start_broadcast_time = val;
__isset.start_broadcast_time = true;
}

void HotspotRequest::__set_start_broadcast_time_type(const int32_t val) {
  this->start_broadcast_time_type = val;
__isset.start_broadcast_time_type = true;
}

void HotspotRequest::__set_trace_info(const Trace& val) {
  this->trace_info = val;
__isset.trace_info = true;
}

const char* HotspotRequest::ascii_fingerprint = "E08F305EADD2B4C64030803283777B86";
const uint8_t HotspotRequest::binary_fingerprint[16] = {0xE0,0x8F,0x30,0x5E,0xAD,0xD2,0xB4,0xC6,0x40,0x30,0x80,0x32,0x83,0x77,0x7B,0x86};

uint32_t HotspotRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_product_id = false;
  bool isset_acc_key = false;
  bool isset_app_version = false;
  bool isset_sdk_type = false;
  bool isset_client_type = false;
  bool isset_phone = false;
  bool isset_pid = false;
  bool isset_cur_lng = false;
  bool isset_cur_lat = false;
  bool isset_start_lng = false;
  bool isset_start_lat = false;
  bool isset_start_type = false;
  bool isset_start_name = false;
  bool isset_start_address = false;
  bool isset_dest_lng = false;
  bool isset_dest_lat = false;
  bool isset_dest_name = false;
  bool isset_dest_address = false;
  bool isset_cur_step = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->product_id);
          isset_product_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->acc_key);
          isset_acc_key = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->app_version);
          isset_app_version = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->sdk_type);
          isset_sdk_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->client_type);
          isset_client_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->phone);
          isset_phone = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->pid);
          isset_pid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->cur_lng);
          isset_cur_lng = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->cur_lat);
          isset_cur_lat = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->start_uid);
          this->__isset.start_uid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->start_lng);
          isset_start_lng = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->start_lat);
          isset_start_lat = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->start_type);
          isset_start_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->start_name);
          isset_start_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->start_address);
          isset_start_address = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->dest_uid);
          this->__isset.dest_uid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 17:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->dest_lng);
          isset_dest_lng = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 18:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->dest_lat);
          isset_dest_lat = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 19:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->dest_type);
          this->__isset.dest_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 20:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->dest_name);
          isset_dest_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 21:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->dest_address);
          isset_dest_address = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 22:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->cur_step);
          isset_cur_step = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 23:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->traceid);
          this->__isset.traceid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 24:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->spanid);
          this->__isset.spanid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 25:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->extends_info);
          this->__isset.extends_info = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 26:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->city_id);
          this->__isset.city_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 27:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->lang);
          this->__isset.lang = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 28:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->seat_num_needed);
          this->__isset.seat_num_needed = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 29:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->extMap.clear();
            uint32_t _size2;
            ::apache::thrift::protocol::TType _ktype3;
            ::apache::thrift::protocol::TType _vtype4;
            xfer += iprot->readMapBegin(_ktype3, _vtype4, _size2);
            uint32_t _i6;
            for (_i6 = 0; _i6 < _size2; ++_i6)
            {
              std::string _key7;
              xfer += iprot->readString(_key7);
              std::string& _val8 = this->extMap[_key7];
              xfer += iprot->readString(_val8);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.extMap = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 30:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->bubble_pid);
          this->__isset.bubble_pid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 31:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->station_id);
          this->__isset.station_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 32:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->start_broadcast_time);
          this->__isset.start_broadcast_time = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 33:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->start_broadcast_time_type);
          this->__isset.start_broadcast_time_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 50:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->trace_info.read(iprot);
          this->__isset.trace_info = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_product_id)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_acc_key)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_app_version)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_sdk_type)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_client_type)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_phone)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_pid)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_cur_lng)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_cur_lat)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_start_lng)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_start_lat)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_start_type)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_start_name)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_start_address)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_dest_lng)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_dest_lat)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_dest_name)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_dest_address)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_cur_step)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t HotspotRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("HotspotRequest");

  xfer += oprot->writeFieldBegin("product_id", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->product_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("acc_key", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->acc_key);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("app_version", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->app_version);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sdk_type", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->sdk_type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("client_type", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->client_type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("phone", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->phone);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("pid", ::apache::thrift::protocol::T_STRING, 7);
  xfer += oprot->writeString(this->pid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("cur_lng", ::apache::thrift::protocol::T_DOUBLE, 8);
  xfer += oprot->writeDouble(this->cur_lng);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("cur_lat", ::apache::thrift::protocol::T_DOUBLE, 9);
  xfer += oprot->writeDouble(this->cur_lat);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.start_uid) {
    xfer += oprot->writeFieldBegin("start_uid", ::apache::thrift::protocol::T_STRING, 10);
    xfer += oprot->writeString(this->start_uid);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("start_lng", ::apache::thrift::protocol::T_DOUBLE, 11);
  xfer += oprot->writeDouble(this->start_lng);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("start_lat", ::apache::thrift::protocol::T_DOUBLE, 12);
  xfer += oprot->writeDouble(this->start_lat);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("start_type", ::apache::thrift::protocol::T_STRING, 13);
  xfer += oprot->writeString(this->start_type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("start_name", ::apache::thrift::protocol::T_STRING, 14);
  xfer += oprot->writeString(this->start_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("start_address", ::apache::thrift::protocol::T_STRING, 15);
  xfer += oprot->writeString(this->start_address);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.dest_uid) {
    xfer += oprot->writeFieldBegin("dest_uid", ::apache::thrift::protocol::T_STRING, 16);
    xfer += oprot->writeString(this->dest_uid);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("dest_lng", ::apache::thrift::protocol::T_DOUBLE, 17);
  xfer += oprot->writeDouble(this->dest_lng);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dest_lat", ::apache::thrift::protocol::T_DOUBLE, 18);
  xfer += oprot->writeDouble(this->dest_lat);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.dest_type) {
    xfer += oprot->writeFieldBegin("dest_type", ::apache::thrift::protocol::T_STRING, 19);
    xfer += oprot->writeString(this->dest_type);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("dest_name", ::apache::thrift::protocol::T_STRING, 20);
  xfer += oprot->writeString(this->dest_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dest_address", ::apache::thrift::protocol::T_STRING, 21);
  xfer += oprot->writeString(this->dest_address);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("cur_step", ::apache::thrift::protocol::T_I32, 22);
  xfer += oprot->writeI32(this->cur_step);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.traceid) {
    xfer += oprot->writeFieldBegin("traceid", ::apache::thrift::protocol::T_STRING, 23);
    xfer += oprot->writeString(this->traceid);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.spanid) {
    xfer += oprot->writeFieldBegin("spanid", ::apache::thrift::protocol::T_STRING, 24);
    xfer += oprot->writeString(this->spanid);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.extends_info) {
    xfer += oprot->writeFieldBegin("extends_info", ::apache::thrift::protocol::T_STRING, 25);
    xfer += oprot->writeString(this->extends_info);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.city_id) {
    xfer += oprot->writeFieldBegin("city_id", ::apache::thrift::protocol::T_I32, 26);
    xfer += oprot->writeI32(this->city_id);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.lang) {
    xfer += oprot->writeFieldBegin("lang", ::apache::thrift::protocol::T_STRING, 27);
    xfer += oprot->writeString(this->lang);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.seat_num_needed) {
    xfer += oprot->writeFieldBegin("seat_num_needed", ::apache::thrift::protocol::T_I32, 28);
    xfer += oprot->writeI32(this->seat_num_needed);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.extMap) {
    xfer += oprot->writeFieldBegin("extMap", ::apache::thrift::protocol::T_MAP, 29);
    {
      xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->extMap.size()));
      std::map<std::string, std::string> ::const_iterator _iter9;
      for (_iter9 = this->extMap.begin(); _iter9 != this->extMap.end(); ++_iter9)
      {
        xfer += oprot->writeString(_iter9->first);
        xfer += oprot->writeString(_iter9->second);
      }
      xfer += oprot->writeMapEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.bubble_pid) {
    xfer += oprot->writeFieldBegin("bubble_pid", ::apache::thrift::protocol::T_STRING, 30);
    xfer += oprot->writeString(this->bubble_pid);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.station_id) {
    xfer += oprot->writeFieldBegin("station_id", ::apache::thrift::protocol::T_STRING, 31);
    xfer += oprot->writeString(this->station_id);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.start_broadcast_time) {
    xfer += oprot->writeFieldBegin("start_broadcast_time", ::apache::thrift::protocol::T_I32, 32);
    xfer += oprot->writeI32(this->start_broadcast_time);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.start_broadcast_time_type) {
    xfer += oprot->writeFieldBegin("start_broadcast_time_type", ::apache::thrift::protocol::T_I32, 33);
    xfer += oprot->writeI32(this->start_broadcast_time_type);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.trace_info) {
    xfer += oprot->writeFieldBegin("trace_info", ::apache::thrift::protocol::T_STRUCT, 50);
    xfer += this->trace_info.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(HotspotRequest &a, HotspotRequest &b) {
  using ::std::swap;
  swap(a.product_id, b.product_id);
  swap(a.acc_key, b.acc_key);
  swap(a.app_version, b.app_version);
  swap(a.sdk_type, b.sdk_type);
  swap(a.client_type, b.client_type);
  swap(a.phone, b.phone);
  swap(a.pid, b.pid);
  swap(a.cur_lng, b.cur_lng);
  swap(a.cur_lat, b.cur_lat);
  swap(a.start_uid, b.start_uid);
  swap(a.start_lng, b.start_lng);
  swap(a.start_lat, b.start_lat);
  swap(a.start_type, b.start_type);
  swap(a.start_name, b.start_name);
  swap(a.start_address, b.start_address);
  swap(a.dest_uid, b.dest_uid);
  swap(a.dest_lng, b.dest_lng);
  swap(a.dest_lat, b.dest_lat);
  swap(a.dest_type, b.dest_type);
  swap(a.dest_name, b.dest_name);
  swap(a.dest_address, b.dest_address);
  swap(a.cur_step, b.cur_step);
  swap(a.traceid, b.traceid);
  swap(a.spanid, b.spanid);
  swap(a.extends_info, b.extends_info);
  swap(a.city_id, b.city_id);
  swap(a.lang, b.lang);
  swap(a.seat_num_needed, b.seat_num_needed);
  swap(a.extMap, b.extMap);
  swap(a.bubble_pid, b.bubble_pid);
  swap(a.station_id, b.station_id);
  swap(a.start_broadcast_time, b.start_broadcast_time);
  swap(a.start_broadcast_time_type, b.start_broadcast_time_type);
  swap(a.trace_info, b.trace_info);
  swap(a.__isset, b.__isset);
}

HotspotRequest::HotspotRequest(const HotspotRequest& other10) {
  product_id = other10.product_id;
  acc_key = other10.acc_key;
  app_version = other10.app_version;
  sdk_type = other10.sdk_type;
  client_type = other10.client_type;
  phone = other10.phone;
  pid = other10.pid;
  cur_lng = other10.cur_lng;
  cur_lat = other10.cur_lat;
  start_uid = other10.start_uid;
  start_lng = other10.start_lng;
  start_lat = other10.start_lat;
  start_type = other10.start_type;
  start_name = other10.start_name;
  start_address = other10.start_address;
  dest_uid = other10.dest_uid;
  dest_lng = other10.dest_lng;
  dest_lat = other10.dest_lat;
  dest_type = other10.dest_type;
  dest_name = other10.dest_name;
  dest_address = other10.dest_address;
  cur_step = other10.cur_step;
  traceid = other10.traceid;
  spanid = other10.spanid;
  extends_info = other10.extends_info;
  city_id = other10.city_id;
  lang = other10.lang;
  seat_num_needed = other10.seat_num_needed;
  extMap = other10.extMap;
  bubble_pid = other10.bubble_pid;
  station_id = other10.station_id;
  start_broadcast_time = other10.start_broadcast_time;
  start_broadcast_time_type = other10.start_broadcast_time_type;
  trace_info = other10.trace_info;
  __isset = other10.__isset;
}
HotspotRequest& HotspotRequest::operator=(const HotspotRequest& other11) {
  product_id = other11.product_id;
  acc_key = other11.acc_key;
  app_version = other11.app_version;
  sdk_type = other11.sdk_type;
  client_type = other11.client_type;
  phone = other11.phone;
  pid = other11.pid;
  cur_lng = other11.cur_lng;
  cur_lat = other11.cur_lat;
  start_uid = other11.start_uid;
  start_lng = other11.start_lng;
  start_lat = other11.start_lat;
  start_type = other11.start_type;
  start_name = other11.start_name;
  start_address = other11.start_address;
  dest_uid = other11.dest_uid;
  dest_lng = other11.dest_lng;
  dest_lat = other11.dest_lat;
  dest_type = other11.dest_type;
  dest_name = other11.dest_name;
  dest_address = other11.dest_address;
  cur_step = other11.cur_step;
  traceid = other11.traceid;
  spanid = other11.spanid;
  extends_info = other11.extends_info;
  city_id = other11.city_id;
  lang = other11.lang;
  seat_num_needed = other11.seat_num_needed;
  extMap = other11.extMap;
  bubble_pid = other11.bubble_pid;
  station_id = other11.station_id;
  start_broadcast_time = other11.start_broadcast_time;
  start_broadcast_time_type = other11.start_broadcast_time_type;
  trace_info = other11.trace_info;
  __isset = other11.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const HotspotRequest& obj) {
  using apache::thrift::to_string;
  out << "HotspotRequest(";
  out << "product_id=" << to_string(obj.product_id);
  out << ", " << "acc_key=" << to_string(obj.acc_key);
  out << ", " << "app_version=" << to_string(obj.app_version);
  out << ", " << "sdk_type=" << to_string(obj.sdk_type);
  out << ", " << "client_type=" << to_string(obj.client_type);
  out << ", " << "phone=" << to_string(obj.phone);
  out << ", " << "pid=" << to_string(obj.pid);
  out << ", " << "cur_lng=" << to_string(obj.cur_lng);
  out << ", " << "cur_lat=" << to_string(obj.cur_lat);
  out << ", " << "start_uid="; (obj.__isset.start_uid ? (out << to_string(obj.start_uid)) : (out << "<null>"));
  out << ", " << "start_lng=" << to_string(obj.start_lng);
  out << ", " << "start_lat=" << to_string(obj.start_lat);
  out << ", " << "start_type=" << to_string(obj.start_type);
  out << ", " << "start_name=" << to_string(obj.start_name);
  out << ", " << "start_address=" << to_string(obj.start_address);
  out << ", " << "dest_uid="; (obj.__isset.dest_uid ? (out << to_string(obj.dest_uid)) : (out << "<null>"));
  out << ", " << "dest_lng=" << to_string(obj.dest_lng);
  out << ", " << "dest_lat=" << to_string(obj.dest_lat);
  out << ", " << "dest_type="; (obj.__isset.dest_type ? (out << to_string(obj.dest_type)) : (out << "<null>"));
  out << ", " << "dest_name=" << to_string(obj.dest_name);
  out << ", " << "dest_address=" << to_string(obj.dest_address);
  out << ", " << "cur_step=" << to_string(obj.cur_step);
  out << ", " << "traceid="; (obj.__isset.traceid ? (out << to_string(obj.traceid)) : (out << "<null>"));
  out << ", " << "spanid="; (obj.__isset.spanid ? (out << to_string(obj.spanid)) : (out << "<null>"));
  out << ", " << "extends_info="; (obj.__isset.extends_info ? (out << to_string(obj.extends_info)) : (out << "<null>"));
  out << ", " << "city_id="; (obj.__isset.city_id ? (out << to_string(obj.city_id)) : (out << "<null>"));
  out << ", " << "lang="; (obj.__isset.lang ? (out << to_string(obj.lang)) : (out << "<null>"));
  out << ", " << "seat_num_needed="; (obj.__isset.seat_num_needed ? (out << to_string(obj.seat_num_needed)) : (out << "<null>"));
  out << ", " << "extMap="; (obj.__isset.extMap ? (out << to_string(obj.extMap)) : (out << "<null>"));
  out << ", " << "bubble_pid="; (obj.__isset.bubble_pid ? (out << to_string(obj.bubble_pid)) : (out << "<null>"));
  out << ", " << "station_id="; (obj.__isset.station_id ? (out << to_string(obj.station_id)) : (out << "<null>"));
  out << ", " << "start_broadcast_time="; (obj.__isset.start_broadcast_time ? (out << to_string(obj.start_broadcast_time)) : (out << "<null>"));
  out << ", " << "start_broadcast_time_type="; (obj.__isset.start_broadcast_time_type ? (out << to_string(obj.start_broadcast_time_type)) : (out << "<null>"));
  out << ", " << "trace_info="; (obj.__isset.trace_info ? (out << to_string(obj.trace_info)) : (out << "<null>"));
  out << ")";
  return out;
}


StationInfo::~StationInfo() throw() {
}


void StationInfo::__set_uid(const std::string& val) {
  this->uid = val;
}

void StationInfo::__set_lng(const double val) {
  this->lng = val;
}

void StationInfo::__set_lat(const double val) {
  this->lat = val;
}

void StationInfo::__set_name(const std::string& val) {
  this->name = val;
}

void StationInfo::__set_address(const std::string& val) {
  this->address = val;
}

void StationInfo::__set_mis_id_list(const std::vector<std::string> & val) {
  this->mis_id_list = val;
}

void StationInfo::__set_count_down_time(const int32_t val) {
  this->count_down_time = val;
}

void StationInfo::__set_walk_distance(const int32_t val) {
  this->walk_distance = val;
}

void StationInfo::__set_walk_time(const int32_t val) {
  this->walk_time = val;
}

void StationInfo::__set_is_default(const bool val) {
  this->is_default = val;
}

void StationInfo::__set_extends_info(const std::string& val) {
  this->extends_info = val;
__isset.extends_info = true;
}

void StationInfo::__set_rec_reason(const std::string& val) {
  this->rec_reason = val;
__isset.rec_reason = true;
}

void StationInfo::__set_do_pop(const int32_t val) {
  this->do_pop = val;
}

void StationInfo::__set_pop_reason(const std::string& val) {
  this->pop_reason = val;
}

void StationInfo::__set_text_type(const TextType::type val) {
  this->text_type = val;
__isset.text_type = true;
}

void StationInfo::__set_city_id(const int32_t val) {
  this->city_id = val;
__isset.city_id = true;
}

void StationInfo::__set_city_name(const std::string& val) {
  this->city_name = val;
__isset.city_name = true;
}

const char* StationInfo::ascii_fingerprint = "8C5E20C7CE5627F1745BC9679FA3AE2A";
const uint8_t StationInfo::binary_fingerprint[16] = {0x8C,0x5E,0x20,0xC7,0xCE,0x56,0x27,0xF1,0x74,0x5B,0xC9,0x67,0x9F,0xA3,0xAE,0x2A};

uint32_t StationInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_uid = false;
  bool isset_lng = false;
  bool isset_lat = false;
  bool isset_name = false;
  bool isset_address = false;
  bool isset_mis_id_list = false;
  bool isset_count_down_time = false;
  bool isset_walk_distance = false;
  bool isset_walk_time = false;
  bool isset_is_default = false;
  bool isset_do_pop = false;
  bool isset_pop_reason = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->uid);
          isset_uid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->lng);
          isset_lng = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->lat);
          isset_lat = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          isset_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->address);
          isset_address = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->mis_id_list.clear();
            uint32_t _size12;
            ::apache::thrift::protocol::TType _etype15;
            xfer += iprot->readListBegin(_etype15, _size12);
            this->mis_id_list.resize(_size12);
            uint32_t _i16;
            for (_i16 = 0; _i16 < _size12; ++_i16)
            {
              xfer += iprot->readString(this->mis_id_list[_i16]);
            }
            xfer += iprot->readListEnd();
          }
          isset_mis_id_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->count_down_time);
          isset_count_down_time = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->walk_distance);
          isset_walk_distance = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->walk_time);
          isset_walk_time = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->is_default);
          isset_is_default = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->extends_info);
          this->__isset.extends_info = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->rec_reason);
          this->__isset.rec_reason = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->do_pop);
          isset_do_pop = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->pop_reason);
          isset_pop_reason = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast17;
          xfer += iprot->readI32(ecast17);
          this->text_type = (TextType::type)ecast17;
          this->__isset.text_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->city_id);
          this->__isset.city_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 17:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->city_name);
          this->__isset.city_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_uid)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_lng)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_lat)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_name)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_address)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_mis_id_list)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_count_down_time)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_walk_distance)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_walk_time)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_is_default)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_do_pop)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_pop_reason)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t StationInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("StationInfo");

  xfer += oprot->writeFieldBegin("uid", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->uid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("lng", ::apache::thrift::protocol::T_DOUBLE, 2);
  xfer += oprot->writeDouble(this->lng);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("lat", ::apache::thrift::protocol::T_DOUBLE, 3);
  xfer += oprot->writeDouble(this->lat);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("address", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->address);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("mis_id_list", ::apache::thrift::protocol::T_LIST, 6);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->mis_id_list.size()));
    std::vector<std::string> ::const_iterator _iter18;
    for (_iter18 = this->mis_id_list.begin(); _iter18 != this->mis_id_list.end(); ++_iter18)
    {
      xfer += oprot->writeString((*_iter18));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("count_down_time", ::apache::thrift::protocol::T_I32, 7);
  xfer += oprot->writeI32(this->count_down_time);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("walk_distance", ::apache::thrift::protocol::T_I32, 8);
  xfer += oprot->writeI32(this->walk_distance);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("walk_time", ::apache::thrift::protocol::T_I32, 9);
  xfer += oprot->writeI32(this->walk_time);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("is_default", ::apache::thrift::protocol::T_BOOL, 10);
  xfer += oprot->writeBool(this->is_default);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.extends_info) {
    xfer += oprot->writeFieldBegin("extends_info", ::apache::thrift::protocol::T_STRING, 11);
    xfer += oprot->writeString(this->extends_info);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.rec_reason) {
    xfer += oprot->writeFieldBegin("rec_reason", ::apache::thrift::protocol::T_STRING, 12);
    xfer += oprot->writeString(this->rec_reason);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("do_pop", ::apache::thrift::protocol::T_I32, 13);
  xfer += oprot->writeI32(this->do_pop);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("pop_reason", ::apache::thrift::protocol::T_STRING, 14);
  xfer += oprot->writeString(this->pop_reason);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.text_type) {
    xfer += oprot->writeFieldBegin("text_type", ::apache::thrift::protocol::T_I32, 15);
    xfer += oprot->writeI32((int32_t)this->text_type);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.city_id) {
    xfer += oprot->writeFieldBegin("city_id", ::apache::thrift::protocol::T_I32, 16);
    xfer += oprot->writeI32(this->city_id);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.city_name) {
    xfer += oprot->writeFieldBegin("city_name", ::apache::thrift::protocol::T_STRING, 17);
    xfer += oprot->writeString(this->city_name);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(StationInfo &a, StationInfo &b) {
  using ::std::swap;
  swap(a.uid, b.uid);
  swap(a.lng, b.lng);
  swap(a.lat, b.lat);
  swap(a.name, b.name);
  swap(a.address, b.address);
  swap(a.mis_id_list, b.mis_id_list);
  swap(a.count_down_time, b.count_down_time);
  swap(a.walk_distance, b.walk_distance);
  swap(a.walk_time, b.walk_time);
  swap(a.is_default, b.is_default);
  swap(a.extends_info, b.extends_info);
  swap(a.rec_reason, b.rec_reason);
  swap(a.do_pop, b.do_pop);
  swap(a.pop_reason, b.pop_reason);
  swap(a.text_type, b.text_type);
  swap(a.city_id, b.city_id);
  swap(a.city_name, b.city_name);
  swap(a.__isset, b.__isset);
}

StationInfo::StationInfo(const StationInfo& other19) {
  uid = other19.uid;
  lng = other19.lng;
  lat = other19.lat;
  name = other19.name;
  address = other19.address;
  mis_id_list = other19.mis_id_list;
  count_down_time = other19.count_down_time;
  walk_distance = other19.walk_distance;
  walk_time = other19.walk_time;
  is_default = other19.is_default;
  extends_info = other19.extends_info;
  rec_reason = other19.rec_reason;
  do_pop = other19.do_pop;
  pop_reason = other19.pop_reason;
  text_type = other19.text_type;
  city_id = other19.city_id;
  city_name = other19.city_name;
  __isset = other19.__isset;
}
StationInfo& StationInfo::operator=(const StationInfo& other20) {
  uid = other20.uid;
  lng = other20.lng;
  lat = other20.lat;
  name = other20.name;
  address = other20.address;
  mis_id_list = other20.mis_id_list;
  count_down_time = other20.count_down_time;
  walk_distance = other20.walk_distance;
  walk_time = other20.walk_time;
  is_default = other20.is_default;
  extends_info = other20.extends_info;
  rec_reason = other20.rec_reason;
  do_pop = other20.do_pop;
  pop_reason = other20.pop_reason;
  text_type = other20.text_type;
  city_id = other20.city_id;
  city_name = other20.city_name;
  __isset = other20.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const StationInfo& obj) {
  using apache::thrift::to_string;
  out << "StationInfo(";
  out << "uid=" << to_string(obj.uid);
  out << ", " << "lng=" << to_string(obj.lng);
  out << ", " << "lat=" << to_string(obj.lat);
  out << ", " << "name=" << to_string(obj.name);
  out << ", " << "address=" << to_string(obj.address);
  out << ", " << "mis_id_list=" << to_string(obj.mis_id_list);
  out << ", " << "count_down_time=" << to_string(obj.count_down_time);
  out << ", " << "walk_distance=" << to_string(obj.walk_distance);
  out << ", " << "walk_time=" << to_string(obj.walk_time);
  out << ", " << "is_default=" << to_string(obj.is_default);
  out << ", " << "extends_info="; (obj.__isset.extends_info ? (out << to_string(obj.extends_info)) : (out << "<null>"));
  out << ", " << "rec_reason="; (obj.__isset.rec_reason ? (out << to_string(obj.rec_reason)) : (out << "<null>"));
  out << ", " << "do_pop=" << to_string(obj.do_pop);
  out << ", " << "pop_reason=" << to_string(obj.pop_reason);
  out << ", " << "text_type="; (obj.__isset.text_type ? (out << to_string(obj.text_type)) : (out << "<null>"));
  out << ", " << "city_id="; (obj.__isset.city_id ? (out << to_string(obj.city_id)) : (out << "<null>"));
  out << ", " << "city_name="; (obj.__isset.city_name ? (out << to_string(obj.city_name)) : (out << "<null>"));
  out << ")";
  return out;
}


CarpoolEtdInfo::~CarpoolEtdInfo() throw() {
}


void CarpoolEtdInfo::__set_etdLeftMargin(const int64_t val) {
  this->etdLeftMargin = val;
}

void CarpoolEtdInfo::__set_etdRightMargin(const int64_t val) {
  this->etdRightMargin = val;
}

const char* CarpoolEtdInfo::ascii_fingerprint = "F33135321253DAEB67B0E79E416CA831";
const uint8_t CarpoolEtdInfo::binary_fingerprint[16] = {0xF3,0x31,0x35,0x32,0x12,0x53,0xDA,0xEB,0x67,0xB0,0xE7,0x9E,0x41,0x6C,0xA8,0x31};

uint32_t CarpoolEtdInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_etdLeftMargin = false;
  bool isset_etdRightMargin = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->etdLeftMargin);
          isset_etdLeftMargin = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->etdRightMargin);
          isset_etdRightMargin = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_etdLeftMargin)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_etdRightMargin)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t CarpoolEtdInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("CarpoolEtdInfo");

  xfer += oprot->writeFieldBegin("etdLeftMargin", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->etdLeftMargin);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("etdRightMargin", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->etdRightMargin);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(CarpoolEtdInfo &a, CarpoolEtdInfo &b) {
  using ::std::swap;
  swap(a.etdLeftMargin, b.etdLeftMargin);
  swap(a.etdRightMargin, b.etdRightMargin);
}

CarpoolEtdInfo::CarpoolEtdInfo(const CarpoolEtdInfo& other21) {
  etdLeftMargin = other21.etdLeftMargin;
  etdRightMargin = other21.etdRightMargin;
}
CarpoolEtdInfo& CarpoolEtdInfo::operator=(const CarpoolEtdInfo& other22) {
  etdLeftMargin = other22.etdLeftMargin;
  etdRightMargin = other22.etdRightMargin;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const CarpoolEtdInfo& obj) {
  using apache::thrift::to_string;
  out << "CarpoolEtdInfo(";
  out << "etdLeftMargin=" << to_string(obj.etdLeftMargin);
  out << ", " << "etdRightMargin=" << to_string(obj.etdRightMargin);
  out << ")";
  return out;
}


HotspotResponse::~HotspotResponse() throw() {
}


void HotspotResponse::__set_error_code(const int32_t val) {
  this->error_code = val;
}

void HotspotResponse::__set_error_msg(const std::string& val) {
  this->error_msg = val;
}

void HotspotResponse::__set_station_list(const std::vector<StationInfo> & val) {
  this->station_list = val;
}

void HotspotResponse::__set_extends_info(const std::string& val) {
  this->extends_info = val;
__isset.extends_info = true;
}

const char* HotspotResponse::ascii_fingerprint = "4F97F64A1BFAC1E867C68EE96164AB14";
const uint8_t HotspotResponse::binary_fingerprint[16] = {0x4F,0x97,0xF6,0x4A,0x1B,0xFA,0xC1,0xE8,0x67,0xC6,0x8E,0xE9,0x61,0x64,0xAB,0x14};

uint32_t HotspotResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_error_code = false;
  bool isset_error_msg = false;
  bool isset_station_list = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->error_code);
          isset_error_code = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->error_msg);
          isset_error_msg = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->station_list.clear();
            uint32_t _size23;
            ::apache::thrift::protocol::TType _etype26;
            xfer += iprot->readListBegin(_etype26, _size23);
            this->station_list.resize(_size23);
            uint32_t _i27;
            for (_i27 = 0; _i27 < _size23; ++_i27)
            {
              xfer += this->station_list[_i27].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          isset_station_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->extends_info);
          this->__isset.extends_info = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_error_code)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_error_msg)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_station_list)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t HotspotResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("HotspotResponse");

  xfer += oprot->writeFieldBegin("error_code", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->error_code);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("error_msg", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->error_msg);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("station_list", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->station_list.size()));
    std::vector<StationInfo> ::const_iterator _iter28;
    for (_iter28 = this->station_list.begin(); _iter28 != this->station_list.end(); ++_iter28)
    {
      xfer += (*_iter28).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  if (this->__isset.extends_info) {
    xfer += oprot->writeFieldBegin("extends_info", ::apache::thrift::protocol::T_STRING, 4);
    xfer += oprot->writeString(this->extends_info);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(HotspotResponse &a, HotspotResponse &b) {
  using ::std::swap;
  swap(a.error_code, b.error_code);
  swap(a.error_msg, b.error_msg);
  swap(a.station_list, b.station_list);
  swap(a.extends_info, b.extends_info);
  swap(a.__isset, b.__isset);
}

HotspotResponse::HotspotResponse(const HotspotResponse& other29) {
  error_code = other29.error_code;
  error_msg = other29.error_msg;
  station_list = other29.station_list;
  extends_info = other29.extends_info;
  __isset = other29.__isset;
}
HotspotResponse& HotspotResponse::operator=(const HotspotResponse& other30) {
  error_code = other30.error_code;
  error_msg = other30.error_msg;
  station_list = other30.station_list;
  extends_info = other30.extends_info;
  __isset = other30.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const HotspotResponse& obj) {
  using apache::thrift::to_string;
  out << "HotspotResponse(";
  out << "error_code=" << to_string(obj.error_code);
  out << ", " << "error_msg=" << to_string(obj.error_msg);
  out << ", " << "station_list=" << to_string(obj.station_list);
  out << ", " << "extends_info="; (obj.__isset.extends_info ? (out << to_string(obj.extends_info)) : (out << "<null>"));
  out << ")";
  return out;
}


ForecastDepartureTimeRequest::~ForecastDepartureTimeRequest() throw() {
}


void ForecastDepartureTimeRequest::__set_city_id(const int32_t val) {
  this->city_id = val;
}

void ForecastDepartureTimeRequest::__set_pid(const std::string& val) {
  this->pid = val;
}

void ForecastDepartureTimeRequest::__set_traceid(const std::string& val) {
  this->traceid = val;
}

void ForecastDepartureTimeRequest::__set_spanid(const std::string& val) {
  this->spanid = val;
}

void ForecastDepartureTimeRequest::__set_station_id(const std::string& val) {
  this->station_id = val;
}

void ForecastDepartureTimeRequest::__set_last_ready_departure_time(const int64_t val) {
  this->last_ready_departure_time = val;
__isset.last_ready_departure_time = true;
}

void ForecastDepartureTimeRequest::__set_lang(const std::string& val) {
  this->lang = val;
__isset.lang = true;
}

void ForecastDepartureTimeRequest::__set_extMap(const std::map<std::string, std::string> & val) {
  this->extMap = val;
__isset.extMap = true;
}

void ForecastDepartureTimeRequest::__set_cur_lng(const double val) {
  this->cur_lng = val;
__isset.cur_lng = true;
}

void ForecastDepartureTimeRequest::__set_cur_lat(const double val) {
  this->cur_lat = val;
__isset.cur_lat = true;
}

void ForecastDepartureTimeRequest::__set_bubble_pid(const std::string& val) {
  this->bubble_pid = val;
__isset.bubble_pid = true;
}

void ForecastDepartureTimeRequest::__set_bubble_trace_id(const std::string& val) {
  this->bubble_trace_id = val;
__isset.bubble_trace_id = true;
}

void ForecastDepartureTimeRequest::__set_appversion(const std::string& val) {
  this->appversion = val;
__isset.appversion = true;
}

void ForecastDepartureTimeRequest::__set_product_id(const std::string& val) {
  this->product_id = val;
__isset.product_id = true;
}

void ForecastDepartureTimeRequest::__set_trace_info(const Trace& val) {
  this->trace_info = val;
__isset.trace_info = true;
}

const char* ForecastDepartureTimeRequest::ascii_fingerprint = "0A21427BD81FC65AA27CE2A7168F9724";
const uint8_t ForecastDepartureTimeRequest::binary_fingerprint[16] = {0x0A,0x21,0x42,0x7B,0xD8,0x1F,0xC6,0x5A,0xA2,0x7C,0xE2,0xA7,0x16,0x8F,0x97,0x24};

uint32_t ForecastDepartureTimeRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_city_id = false;
  bool isset_pid = false;
  bool isset_traceid = false;
  bool isset_spanid = false;
  bool isset_station_id = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->city_id);
          isset_city_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->pid);
          isset_pid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->traceid);
          isset_traceid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->spanid);
          isset_spanid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->station_id);
          isset_station_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->last_ready_departure_time);
          this->__isset.last_ready_departure_time = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->lang);
          this->__isset.lang = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->extMap.clear();
            uint32_t _size31;
            ::apache::thrift::protocol::TType _ktype32;
            ::apache::thrift::protocol::TType _vtype33;
            xfer += iprot->readMapBegin(_ktype32, _vtype33, _size31);
            uint32_t _i35;
            for (_i35 = 0; _i35 < _size31; ++_i35)
            {
              std::string _key36;
              xfer += iprot->readString(_key36);
              std::string& _val37 = this->extMap[_key36];
              xfer += iprot->readString(_val37);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.extMap = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->cur_lng);
          this->__isset.cur_lng = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->cur_lat);
          this->__isset.cur_lat = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->bubble_pid);
          this->__isset.bubble_pid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->bubble_trace_id);
          this->__isset.bubble_trace_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->appversion);
          this->__isset.appversion = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->product_id);
          this->__isset.product_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 20:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->trace_info.read(iprot);
          this->__isset.trace_info = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_city_id)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_pid)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_traceid)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_spanid)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_station_id)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t ForecastDepartureTimeRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("ForecastDepartureTimeRequest");

  xfer += oprot->writeFieldBegin("city_id", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->city_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("pid", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->pid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("traceid", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->traceid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("spanid", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->spanid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("station_id", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->station_id);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.last_ready_departure_time) {
    xfer += oprot->writeFieldBegin("last_ready_departure_time", ::apache::thrift::protocol::T_I64, 6);
    xfer += oprot->writeI64(this->last_ready_departure_time);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.lang) {
    xfer += oprot->writeFieldBegin("lang", ::apache::thrift::protocol::T_STRING, 7);
    xfer += oprot->writeString(this->lang);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.extMap) {
    xfer += oprot->writeFieldBegin("extMap", ::apache::thrift::protocol::T_MAP, 8);
    {
      xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->extMap.size()));
      std::map<std::string, std::string> ::const_iterator _iter38;
      for (_iter38 = this->extMap.begin(); _iter38 != this->extMap.end(); ++_iter38)
      {
        xfer += oprot->writeString(_iter38->first);
        xfer += oprot->writeString(_iter38->second);
      }
      xfer += oprot->writeMapEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.cur_lng) {
    xfer += oprot->writeFieldBegin("cur_lng", ::apache::thrift::protocol::T_DOUBLE, 9);
    xfer += oprot->writeDouble(this->cur_lng);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.cur_lat) {
    xfer += oprot->writeFieldBegin("cur_lat", ::apache::thrift::protocol::T_DOUBLE, 10);
    xfer += oprot->writeDouble(this->cur_lat);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.bubble_pid) {
    xfer += oprot->writeFieldBegin("bubble_pid", ::apache::thrift::protocol::T_STRING, 11);
    xfer += oprot->writeString(this->bubble_pid);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.bubble_trace_id) {
    xfer += oprot->writeFieldBegin("bubble_trace_id", ::apache::thrift::protocol::T_STRING, 12);
    xfer += oprot->writeString(this->bubble_trace_id);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.appversion) {
    xfer += oprot->writeFieldBegin("appversion", ::apache::thrift::protocol::T_STRING, 13);
    xfer += oprot->writeString(this->appversion);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.product_id) {
    xfer += oprot->writeFieldBegin("product_id", ::apache::thrift::protocol::T_STRING, 14);
    xfer += oprot->writeString(this->product_id);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.trace_info) {
    xfer += oprot->writeFieldBegin("trace_info", ::apache::thrift::protocol::T_STRUCT, 20);
    xfer += this->trace_info.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(ForecastDepartureTimeRequest &a, ForecastDepartureTimeRequest &b) {
  using ::std::swap;
  swap(a.city_id, b.city_id);
  swap(a.pid, b.pid);
  swap(a.traceid, b.traceid);
  swap(a.spanid, b.spanid);
  swap(a.station_id, b.station_id);
  swap(a.last_ready_departure_time, b.last_ready_departure_time);
  swap(a.lang, b.lang);
  swap(a.extMap, b.extMap);
  swap(a.cur_lng, b.cur_lng);
  swap(a.cur_lat, b.cur_lat);
  swap(a.bubble_pid, b.bubble_pid);
  swap(a.bubble_trace_id, b.bubble_trace_id);
  swap(a.appversion, b.appversion);
  swap(a.product_id, b.product_id);
  swap(a.trace_info, b.trace_info);
  swap(a.__isset, b.__isset);
}

ForecastDepartureTimeRequest::ForecastDepartureTimeRequest(const ForecastDepartureTimeRequest& other39) {
  city_id = other39.city_id;
  pid = other39.pid;
  traceid = other39.traceid;
  spanid = other39.spanid;
  station_id = other39.station_id;
  last_ready_departure_time = other39.last_ready_departure_time;
  lang = other39.lang;
  extMap = other39.extMap;
  cur_lng = other39.cur_lng;
  cur_lat = other39.cur_lat;
  bubble_pid = other39.bubble_pid;
  bubble_trace_id = other39.bubble_trace_id;
  appversion = other39.appversion;
  product_id = other39.product_id;
  trace_info = other39.trace_info;
  __isset = other39.__isset;
}
ForecastDepartureTimeRequest& ForecastDepartureTimeRequest::operator=(const ForecastDepartureTimeRequest& other40) {
  city_id = other40.city_id;
  pid = other40.pid;
  traceid = other40.traceid;
  spanid = other40.spanid;
  station_id = other40.station_id;
  last_ready_departure_time = other40.last_ready_departure_time;
  lang = other40.lang;
  extMap = other40.extMap;
  cur_lng = other40.cur_lng;
  cur_lat = other40.cur_lat;
  bubble_pid = other40.bubble_pid;
  bubble_trace_id = other40.bubble_trace_id;
  appversion = other40.appversion;
  product_id = other40.product_id;
  trace_info = other40.trace_info;
  __isset = other40.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const ForecastDepartureTimeRequest& obj) {
  using apache::thrift::to_string;
  out << "ForecastDepartureTimeRequest(";
  out << "city_id=" << to_string(obj.city_id);
  out << ", " << "pid=" << to_string(obj.pid);
  out << ", " << "traceid=" << to_string(obj.traceid);
  out << ", " << "spanid=" << to_string(obj.spanid);
  out << ", " << "station_id=" << to_string(obj.station_id);
  out << ", " << "last_ready_departure_time="; (obj.__isset.last_ready_departure_time ? (out << to_string(obj.last_ready_departure_time)) : (out << "<null>"));
  out << ", " << "lang="; (obj.__isset.lang ? (out << to_string(obj.lang)) : (out << "<null>"));
  out << ", " << "extMap="; (obj.__isset.extMap ? (out << to_string(obj.extMap)) : (out << "<null>"));
  out << ", " << "cur_lng="; (obj.__isset.cur_lng ? (out << to_string(obj.cur_lng)) : (out << "<null>"));
  out << ", " << "cur_lat="; (obj.__isset.cur_lat ? (out << to_string(obj.cur_lat)) : (out << "<null>"));
  out << ", " << "bubble_pid="; (obj.__isset.bubble_pid ? (out << to_string(obj.bubble_pid)) : (out << "<null>"));
  out << ", " << "bubble_trace_id="; (obj.__isset.bubble_trace_id ? (out << to_string(obj.bubble_trace_id)) : (out << "<null>"));
  out << ", " << "appversion="; (obj.__isset.appversion ? (out << to_string(obj.appversion)) : (out << "<null>"));
  out << ", " << "product_id="; (obj.__isset.product_id ? (out << to_string(obj.product_id)) : (out << "<null>"));
  out << ", " << "trace_info="; (obj.__isset.trace_info ? (out << to_string(obj.trace_info)) : (out << "<null>"));
  out << ")";
  return out;
}


ForecastDepartureTimeResponse::~ForecastDepartureTimeResponse() throw() {
}


void ForecastDepartureTimeResponse::__set_error_code(const int32_t val) {
  this->error_code = val;
}

void ForecastDepartureTimeResponse::__set_error_msg(const std::string& val) {
  this->error_msg = val;
}

void ForecastDepartureTimeResponse::__set_ready_departure_time(const int64_t val) {
  this->ready_departure_time = val;
__isset.ready_departure_time = true;
}

void ForecastDepartureTimeResponse::__set_rec_status(const int32_t val) {
  this->rec_status = val;
__isset.rec_status = true;
}

void ForecastDepartureTimeResponse::__set_time_type(const int32_t val) {
  this->time_type = val;
__isset.time_type = true;
}

void ForecastDepartureTimeResponse::__set_left_time(const int64_t val) {
  this->left_time = val;
__isset.left_time = true;
}

void ForecastDepartureTimeResponse::__set_right_time(const int64_t val) {
  this->right_time = val;
__isset.right_time = true;
}

void ForecastDepartureTimeResponse::__set_left_show_time(const int32_t val) {
  this->left_show_time = val;
__isset.left_show_time = true;
}

void ForecastDepartureTimeResponse::__set_right_show_time(const int32_t val) {
  this->right_show_time = val;
__isset.right_show_time = true;
}

void ForecastDepartureTimeResponse::__set_hold_time(const int32_t val) {
  this->hold_time = val;
__isset.hold_time = true;
}

const char* ForecastDepartureTimeResponse::ascii_fingerprint = "43E9AF517D121FDAB432F0ECCC11D01D";
const uint8_t ForecastDepartureTimeResponse::binary_fingerprint[16] = {0x43,0xE9,0xAF,0x51,0x7D,0x12,0x1F,0xDA,0xB4,0x32,0xF0,0xEC,0xCC,0x11,0xD0,0x1D};

uint32_t ForecastDepartureTimeResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_error_code = false;
  bool isset_error_msg = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->error_code);
          isset_error_code = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->error_msg);
          isset_error_msg = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->ready_departure_time);
          this->__isset.ready_departure_time = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->rec_status);
          this->__isset.rec_status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->time_type);
          this->__isset.time_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->left_time);
          this->__isset.left_time = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->right_time);
          this->__isset.right_time = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->left_show_time);
          this->__isset.left_show_time = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->right_show_time);
          this->__isset.right_show_time = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->hold_time);
          this->__isset.hold_time = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_error_code)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_error_msg)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t ForecastDepartureTimeResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("ForecastDepartureTimeResponse");

  xfer += oprot->writeFieldBegin("error_code", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->error_code);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("error_msg", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->error_msg);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.ready_departure_time) {
    xfer += oprot->writeFieldBegin("ready_departure_time", ::apache::thrift::protocol::T_I64, 3);
    xfer += oprot->writeI64(this->ready_departure_time);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.rec_status) {
    xfer += oprot->writeFieldBegin("rec_status", ::apache::thrift::protocol::T_I32, 4);
    xfer += oprot->writeI32(this->rec_status);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.time_type) {
    xfer += oprot->writeFieldBegin("time_type", ::apache::thrift::protocol::T_I32, 5);
    xfer += oprot->writeI32(this->time_type);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.left_time) {
    xfer += oprot->writeFieldBegin("left_time", ::apache::thrift::protocol::T_I64, 6);
    xfer += oprot->writeI64(this->left_time);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.right_time) {
    xfer += oprot->writeFieldBegin("right_time", ::apache::thrift::protocol::T_I64, 7);
    xfer += oprot->writeI64(this->right_time);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.left_show_time) {
    xfer += oprot->writeFieldBegin("left_show_time", ::apache::thrift::protocol::T_I32, 8);
    xfer += oprot->writeI32(this->left_show_time);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.right_show_time) {
    xfer += oprot->writeFieldBegin("right_show_time", ::apache::thrift::protocol::T_I32, 9);
    xfer += oprot->writeI32(this->right_show_time);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.hold_time) {
    xfer += oprot->writeFieldBegin("hold_time", ::apache::thrift::protocol::T_I32, 10);
    xfer += oprot->writeI32(this->hold_time);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(ForecastDepartureTimeResponse &a, ForecastDepartureTimeResponse &b) {
  using ::std::swap;
  swap(a.error_code, b.error_code);
  swap(a.error_msg, b.error_msg);
  swap(a.ready_departure_time, b.ready_departure_time);
  swap(a.rec_status, b.rec_status);
  swap(a.time_type, b.time_type);
  swap(a.left_time, b.left_time);
  swap(a.right_time, b.right_time);
  swap(a.left_show_time, b.left_show_time);
  swap(a.right_show_time, b.right_show_time);
  swap(a.hold_time, b.hold_time);
  swap(a.__isset, b.__isset);
}

ForecastDepartureTimeResponse::ForecastDepartureTimeResponse(const ForecastDepartureTimeResponse& other41) {
  error_code = other41.error_code;
  error_msg = other41.error_msg;
  ready_departure_time = other41.ready_departure_time;
  rec_status = other41.rec_status;
  time_type = other41.time_type;
  left_time = other41.left_time;
  right_time = other41.right_time;
  left_show_time = other41.left_show_time;
  right_show_time = other41.right_show_time;
  hold_time = other41.hold_time;
  __isset = other41.__isset;
}
ForecastDepartureTimeResponse& ForecastDepartureTimeResponse::operator=(const ForecastDepartureTimeResponse& other42) {
  error_code = other42.error_code;
  error_msg = other42.error_msg;
  ready_departure_time = other42.ready_departure_time;
  rec_status = other42.rec_status;
  time_type = other42.time_type;
  left_time = other42.left_time;
  right_time = other42.right_time;
  left_show_time = other42.left_show_time;
  right_show_time = other42.right_show_time;
  hold_time = other42.hold_time;
  __isset = other42.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const ForecastDepartureTimeResponse& obj) {
  using apache::thrift::to_string;
  out << "ForecastDepartureTimeResponse(";
  out << "error_code=" << to_string(obj.error_code);
  out << ", " << "error_msg=" << to_string(obj.error_msg);
  out << ", " << "ready_departure_time="; (obj.__isset.ready_departure_time ? (out << to_string(obj.ready_departure_time)) : (out << "<null>"));
  out << ", " << "rec_status="; (obj.__isset.rec_status ? (out << to_string(obj.rec_status)) : (out << "<null>"));
  out << ", " << "time_type="; (obj.__isset.time_type ? (out << to_string(obj.time_type)) : (out << "<null>"));
  out << ", " << "left_time="; (obj.__isset.left_time ? (out << to_string(obj.left_time)) : (out << "<null>"));
  out << ", " << "right_time="; (obj.__isset.right_time ? (out << to_string(obj.right_time)) : (out << "<null>"));
  out << ", " << "left_show_time="; (obj.__isset.left_show_time ? (out << to_string(obj.left_show_time)) : (out << "<null>"));
  out << ", " << "right_show_time="; (obj.__isset.right_show_time ? (out << to_string(obj.right_show_time)) : (out << "<null>"));
  out << ", " << "hold_time="; (obj.__isset.hold_time ? (out << to_string(obj.hold_time)) : (out << "<null>"));
  out << ")";
  return out;
}


MatchDetailRequest::~MatchDetailRequest() throw() {
}


void MatchDetailRequest::__set_bubble_trace_id(const std::string& val) {
  this->bubble_trace_id = val;
}

void MatchDetailRequest::__set_city_id(const std::string& val) {
  this->city_id = val;
}

void MatchDetailRequest::__set_pid(const std::string& val) {
  this->pid = val;
}

void MatchDetailRequest::__set_birth_time(const int64_t val) {
  this->birth_time = val;
}

void MatchDetailRequest::__set_order_id(const int64_t val) {
  this->order_id = val;
__isset.order_id = true;
}

void MatchDetailRequest::__set_appversion(const std::string& val) {
  this->appversion = val;
__isset.appversion = true;
}

void MatchDetailRequest::__set_extMap(const std::map<std::string, std::string> & val) {
  this->extMap = val;
__isset.extMap = true;
}

void MatchDetailRequest::__set_traceid(const std::string& val) {
  this->traceid = val;
__isset.traceid = true;
}

void MatchDetailRequest::__set_trace_info(const Trace& val) {
  this->trace_info = val;
__isset.trace_info = true;
}

const char* MatchDetailRequest::ascii_fingerprint = "409417E6119667E559C50F4D18840BC3";
const uint8_t MatchDetailRequest::binary_fingerprint[16] = {0x40,0x94,0x17,0xE6,0x11,0x96,0x67,0xE5,0x59,0xC5,0x0F,0x4D,0x18,0x84,0x0B,0xC3};

uint32_t MatchDetailRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_bubble_trace_id = false;
  bool isset_city_id = false;
  bool isset_pid = false;
  bool isset_birth_time = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->bubble_trace_id);
          isset_bubble_trace_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->city_id);
          isset_city_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->pid);
          isset_pid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->birth_time);
          isset_birth_time = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->order_id);
          this->__isset.order_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->appversion);
          this->__isset.appversion = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->extMap.clear();
            uint32_t _size43;
            ::apache::thrift::protocol::TType _ktype44;
            ::apache::thrift::protocol::TType _vtype45;
            xfer += iprot->readMapBegin(_ktype44, _vtype45, _size43);
            uint32_t _i47;
            for (_i47 = 0; _i47 < _size43; ++_i47)
            {
              std::string _key48;
              xfer += iprot->readString(_key48);
              std::string& _val49 = this->extMap[_key48];
              xfer += iprot->readString(_val49);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.extMap = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->traceid);
          this->__isset.traceid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 20:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->trace_info.read(iprot);
          this->__isset.trace_info = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_bubble_trace_id)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_city_id)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_pid)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_birth_time)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MatchDetailRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("MatchDetailRequest");

  xfer += oprot->writeFieldBegin("bubble_trace_id", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->bubble_trace_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("city_id", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->city_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("pid", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->pid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("birth_time", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->birth_time);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.order_id) {
    xfer += oprot->writeFieldBegin("order_id", ::apache::thrift::protocol::T_I64, 5);
    xfer += oprot->writeI64(this->order_id);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.appversion) {
    xfer += oprot->writeFieldBegin("appversion", ::apache::thrift::protocol::T_STRING, 6);
    xfer += oprot->writeString(this->appversion);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.extMap) {
    xfer += oprot->writeFieldBegin("extMap", ::apache::thrift::protocol::T_MAP, 7);
    {
      xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->extMap.size()));
      std::map<std::string, std::string> ::const_iterator _iter50;
      for (_iter50 = this->extMap.begin(); _iter50 != this->extMap.end(); ++_iter50)
      {
        xfer += oprot->writeString(_iter50->first);
        xfer += oprot->writeString(_iter50->second);
      }
      xfer += oprot->writeMapEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.traceid) {
    xfer += oprot->writeFieldBegin("traceid", ::apache::thrift::protocol::T_STRING, 8);
    xfer += oprot->writeString(this->traceid);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.trace_info) {
    xfer += oprot->writeFieldBegin("trace_info", ::apache::thrift::protocol::T_STRUCT, 20);
    xfer += this->trace_info.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(MatchDetailRequest &a, MatchDetailRequest &b) {
  using ::std::swap;
  swap(a.bubble_trace_id, b.bubble_trace_id);
  swap(a.city_id, b.city_id);
  swap(a.pid, b.pid);
  swap(a.birth_time, b.birth_time);
  swap(a.order_id, b.order_id);
  swap(a.appversion, b.appversion);
  swap(a.extMap, b.extMap);
  swap(a.traceid, b.traceid);
  swap(a.trace_info, b.trace_info);
  swap(a.__isset, b.__isset);
}

MatchDetailRequest::MatchDetailRequest(const MatchDetailRequest& other51) {
  bubble_trace_id = other51.bubble_trace_id;
  city_id = other51.city_id;
  pid = other51.pid;
  birth_time = other51.birth_time;
  order_id = other51.order_id;
  appversion = other51.appversion;
  extMap = other51.extMap;
  traceid = other51.traceid;
  trace_info = other51.trace_info;
  __isset = other51.__isset;
}
MatchDetailRequest& MatchDetailRequest::operator=(const MatchDetailRequest& other52) {
  bubble_trace_id = other52.bubble_trace_id;
  city_id = other52.city_id;
  pid = other52.pid;
  birth_time = other52.birth_time;
  order_id = other52.order_id;
  appversion = other52.appversion;
  extMap = other52.extMap;
  traceid = other52.traceid;
  trace_info = other52.trace_info;
  __isset = other52.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const MatchDetailRequest& obj) {
  using apache::thrift::to_string;
  out << "MatchDetailRequest(";
  out << "bubble_trace_id=" << to_string(obj.bubble_trace_id);
  out << ", " << "city_id=" << to_string(obj.city_id);
  out << ", " << "pid=" << to_string(obj.pid);
  out << ", " << "birth_time=" << to_string(obj.birth_time);
  out << ", " << "order_id="; (obj.__isset.order_id ? (out << to_string(obj.order_id)) : (out << "<null>"));
  out << ", " << "appversion="; (obj.__isset.appversion ? (out << to_string(obj.appversion)) : (out << "<null>"));
  out << ", " << "extMap="; (obj.__isset.extMap ? (out << to_string(obj.extMap)) : (out << "<null>"));
  out << ", " << "traceid="; (obj.__isset.traceid ? (out << to_string(obj.traceid)) : (out << "<null>"));
  out << ", " << "trace_info="; (obj.__isset.trace_info ? (out << to_string(obj.trace_info)) : (out << "<null>"));
  out << ")";
  return out;
}


MatchFeature::~MatchFeature() throw() {
}


void MatchFeature::__set_pid(const std::string& val) {
  this->pid = val;
}

void MatchFeature::__set_match_degree(const int32_t val) {
  this->match_degree = val;
}

const char* MatchFeature::ascii_fingerprint = "EEBC915CE44901401D881E6091423036";
const uint8_t MatchFeature::binary_fingerprint[16] = {0xEE,0xBC,0x91,0x5C,0xE4,0x49,0x01,0x40,0x1D,0x88,0x1E,0x60,0x91,0x42,0x30,0x36};

uint32_t MatchFeature::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_pid = false;
  bool isset_match_degree = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->pid);
          isset_pid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->match_degree);
          isset_match_degree = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_pid)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_match_degree)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MatchFeature::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("MatchFeature");

  xfer += oprot->writeFieldBegin("pid", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->pid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("match_degree", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->match_degree);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(MatchFeature &a, MatchFeature &b) {
  using ::std::swap;
  swap(a.pid, b.pid);
  swap(a.match_degree, b.match_degree);
}

MatchFeature::MatchFeature(const MatchFeature& other53) {
  pid = other53.pid;
  match_degree = other53.match_degree;
}
MatchFeature& MatchFeature::operator=(const MatchFeature& other54) {
  pid = other54.pid;
  match_degree = other54.match_degree;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const MatchFeature& obj) {
  using apache::thrift::to_string;
  out << "MatchFeature(";
  out << "pid=" << to_string(obj.pid);
  out << ", " << "match_degree=" << to_string(obj.match_degree);
  out << ")";
  return out;
}


MatchDetailResponse::~MatchDetailResponse() throw() {
}


void MatchDetailResponse::__set_error_code(const int32_t val) {
  this->error_code = val;
}

void MatchDetailResponse::__set_error_msg(const std::string& val) {
  this->error_msg = val;
}

void MatchDetailResponse::__set_matchFeatureList(const std::vector<MatchFeature> & val) {
  this->matchFeatureList = val;
__isset.matchFeatureList = true;
}

void MatchDetailResponse::__set_hold_time(const int32_t val) {
  this->hold_time = val;
__isset.hold_time = true;
}

void MatchDetailResponse::__set_elapsed_time(const int32_t val) {
  this->elapsed_time = val;
__isset.elapsed_time = true;
}

void MatchDetailResponse::__set_rec_status(const int32_t val) {
  this->rec_status = val;
__isset.rec_status = true;
}

const char* MatchDetailResponse::ascii_fingerprint = "49EA2206E6C12DF2AB0FE74871607CCD";
const uint8_t MatchDetailResponse::binary_fingerprint[16] = {0x49,0xEA,0x22,0x06,0xE6,0xC1,0x2D,0xF2,0xAB,0x0F,0xE7,0x48,0x71,0x60,0x7C,0xCD};

uint32_t MatchDetailResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_error_code = false;
  bool isset_error_msg = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->error_code);
          isset_error_code = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->error_msg);
          isset_error_msg = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->matchFeatureList.clear();
            uint32_t _size55;
            ::apache::thrift::protocol::TType _etype58;
            xfer += iprot->readListBegin(_etype58, _size55);
            this->matchFeatureList.resize(_size55);
            uint32_t _i59;
            for (_i59 = 0; _i59 < _size55; ++_i59)
            {
              xfer += this->matchFeatureList[_i59].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.matchFeatureList = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->hold_time);
          this->__isset.hold_time = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->elapsed_time);
          this->__isset.elapsed_time = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->rec_status);
          this->__isset.rec_status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_error_code)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_error_msg)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MatchDetailResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("MatchDetailResponse");

  xfer += oprot->writeFieldBegin("error_code", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->error_code);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("error_msg", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->error_msg);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.matchFeatureList) {
    xfer += oprot->writeFieldBegin("matchFeatureList", ::apache::thrift::protocol::T_LIST, 3);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->matchFeatureList.size()));
      std::vector<MatchFeature> ::const_iterator _iter60;
      for (_iter60 = this->matchFeatureList.begin(); _iter60 != this->matchFeatureList.end(); ++_iter60)
      {
        xfer += (*_iter60).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.hold_time) {
    xfer += oprot->writeFieldBegin("hold_time", ::apache::thrift::protocol::T_I32, 4);
    xfer += oprot->writeI32(this->hold_time);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.elapsed_time) {
    xfer += oprot->writeFieldBegin("elapsed_time", ::apache::thrift::protocol::T_I32, 5);
    xfer += oprot->writeI32(this->elapsed_time);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.rec_status) {
    xfer += oprot->writeFieldBegin("rec_status", ::apache::thrift::protocol::T_I32, 6);
    xfer += oprot->writeI32(this->rec_status);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(MatchDetailResponse &a, MatchDetailResponse &b) {
  using ::std::swap;
  swap(a.error_code, b.error_code);
  swap(a.error_msg, b.error_msg);
  swap(a.matchFeatureList, b.matchFeatureList);
  swap(a.hold_time, b.hold_time);
  swap(a.elapsed_time, b.elapsed_time);
  swap(a.rec_status, b.rec_status);
  swap(a.__isset, b.__isset);
}

MatchDetailResponse::MatchDetailResponse(const MatchDetailResponse& other61) {
  error_code = other61.error_code;
  error_msg = other61.error_msg;
  matchFeatureList = other61.matchFeatureList;
  hold_time = other61.hold_time;
  elapsed_time = other61.elapsed_time;
  rec_status = other61.rec_status;
  __isset = other61.__isset;
}
MatchDetailResponse& MatchDetailResponse::operator=(const MatchDetailResponse& other62) {
  error_code = other62.error_code;
  error_msg = other62.error_msg;
  matchFeatureList = other62.matchFeatureList;
  hold_time = other62.hold_time;
  elapsed_time = other62.elapsed_time;
  rec_status = other62.rec_status;
  __isset = other62.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const MatchDetailResponse& obj) {
  using apache::thrift::to_string;
  out << "MatchDetailResponse(";
  out << "error_code=" << to_string(obj.error_code);
  out << ", " << "error_msg=" << to_string(obj.error_msg);
  out << ", " << "matchFeatureList="; (obj.__isset.matchFeatureList ? (out << to_string(obj.matchFeatureList)) : (out << "<null>"));
  out << ", " << "hold_time="; (obj.__isset.hold_time ? (out << to_string(obj.hold_time)) : (out << "<null>"));
  out << ", " << "elapsed_time="; (obj.__isset.elapsed_time ? (out << to_string(obj.elapsed_time)) : (out << "<null>"));
  out << ", " << "rec_status="; (obj.__isset.rec_status ? (out << to_string(obj.rec_status)) : (out << "<null>"));
  out << ")";
  return out;
}


GetForecastFeatureRequest::~GetForecastFeatureRequest() throw() {
}


void GetForecastFeatureRequest::__set_bubble_trace_id(const std::string& val) {
  this->bubble_trace_id = val;
}

void GetForecastFeatureRequest::__set_city_id(const int32_t val) {
  this->city_id = val;
__isset.city_id = true;
}

void GetForecastFeatureRequest::__set_pid(const std::string& val) {
  this->pid = val;
__isset.pid = true;
}

void GetForecastFeatureRequest::__set_phone(const std::string& val) {
  this->phone = val;
__isset.phone = true;
}

void GetForecastFeatureRequest::__set_extMap(const std::map<std::string, std::string> & val) {
  this->extMap = val;
__isset.extMap = true;
}

void GetForecastFeatureRequest::__set_traceid(const std::string& val) {
  this->traceid = val;
__isset.traceid = true;
}

void GetForecastFeatureRequest::__set_spanid(const std::string& val) {
  this->spanid = val;
__isset.spanid = true;
}

void GetForecastFeatureRequest::__set_trace_info(const Trace& val) {
  this->trace_info = val;
__isset.trace_info = true;
}

const char* GetForecastFeatureRequest::ascii_fingerprint = "81820A61B4B26B13A1B0AC8320716BB3";
const uint8_t GetForecastFeatureRequest::binary_fingerprint[16] = {0x81,0x82,0x0A,0x61,0xB4,0xB2,0x6B,0x13,0xA1,0xB0,0xAC,0x83,0x20,0x71,0x6B,0xB3};

uint32_t GetForecastFeatureRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_bubble_trace_id = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->bubble_trace_id);
          isset_bubble_trace_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->city_id);
          this->__isset.city_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->pid);
          this->__isset.pid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->phone);
          this->__isset.phone = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->extMap.clear();
            uint32_t _size63;
            ::apache::thrift::protocol::TType _ktype64;
            ::apache::thrift::protocol::TType _vtype65;
            xfer += iprot->readMapBegin(_ktype64, _vtype65, _size63);
            uint32_t _i67;
            for (_i67 = 0; _i67 < _size63; ++_i67)
            {
              std::string _key68;
              xfer += iprot->readString(_key68);
              std::string& _val69 = this->extMap[_key68];
              xfer += iprot->readString(_val69);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.extMap = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->traceid);
          this->__isset.traceid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->spanid);
          this->__isset.spanid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 20:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->trace_info.read(iprot);
          this->__isset.trace_info = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_bubble_trace_id)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t GetForecastFeatureRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("GetForecastFeatureRequest");

  xfer += oprot->writeFieldBegin("bubble_trace_id", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->bubble_trace_id);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.city_id) {
    xfer += oprot->writeFieldBegin("city_id", ::apache::thrift::protocol::T_I32, 2);
    xfer += oprot->writeI32(this->city_id);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.pid) {
    xfer += oprot->writeFieldBegin("pid", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->pid);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.phone) {
    xfer += oprot->writeFieldBegin("phone", ::apache::thrift::protocol::T_STRING, 4);
    xfer += oprot->writeString(this->phone);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.extMap) {
    xfer += oprot->writeFieldBegin("extMap", ::apache::thrift::protocol::T_MAP, 5);
    {
      xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->extMap.size()));
      std::map<std::string, std::string> ::const_iterator _iter70;
      for (_iter70 = this->extMap.begin(); _iter70 != this->extMap.end(); ++_iter70)
      {
        xfer += oprot->writeString(_iter70->first);
        xfer += oprot->writeString(_iter70->second);
      }
      xfer += oprot->writeMapEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.traceid) {
    xfer += oprot->writeFieldBegin("traceid", ::apache::thrift::protocol::T_STRING, 6);
    xfer += oprot->writeString(this->traceid);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.spanid) {
    xfer += oprot->writeFieldBegin("spanid", ::apache::thrift::protocol::T_STRING, 7);
    xfer += oprot->writeString(this->spanid);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.trace_info) {
    xfer += oprot->writeFieldBegin("trace_info", ::apache::thrift::protocol::T_STRUCT, 20);
    xfer += this->trace_info.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(GetForecastFeatureRequest &a, GetForecastFeatureRequest &b) {
  using ::std::swap;
  swap(a.bubble_trace_id, b.bubble_trace_id);
  swap(a.city_id, b.city_id);
  swap(a.pid, b.pid);
  swap(a.phone, b.phone);
  swap(a.extMap, b.extMap);
  swap(a.traceid, b.traceid);
  swap(a.spanid, b.spanid);
  swap(a.trace_info, b.trace_info);
  swap(a.__isset, b.__isset);
}

GetForecastFeatureRequest::GetForecastFeatureRequest(const GetForecastFeatureRequest& other71) {
  bubble_trace_id = other71.bubble_trace_id;
  city_id = other71.city_id;
  pid = other71.pid;
  phone = other71.phone;
  extMap = other71.extMap;
  traceid = other71.traceid;
  spanid = other71.spanid;
  trace_info = other71.trace_info;
  __isset = other71.__isset;
}
GetForecastFeatureRequest& GetForecastFeatureRequest::operator=(const GetForecastFeatureRequest& other72) {
  bubble_trace_id = other72.bubble_trace_id;
  city_id = other72.city_id;
  pid = other72.pid;
  phone = other72.phone;
  extMap = other72.extMap;
  traceid = other72.traceid;
  spanid = other72.spanid;
  trace_info = other72.trace_info;
  __isset = other72.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const GetForecastFeatureRequest& obj) {
  using apache::thrift::to_string;
  out << "GetForecastFeatureRequest(";
  out << "bubble_trace_id=" << to_string(obj.bubble_trace_id);
  out << ", " << "city_id="; (obj.__isset.city_id ? (out << to_string(obj.city_id)) : (out << "<null>"));
  out << ", " << "pid="; (obj.__isset.pid ? (out << to_string(obj.pid)) : (out << "<null>"));
  out << ", " << "phone="; (obj.__isset.phone ? (out << to_string(obj.phone)) : (out << "<null>"));
  out << ", " << "extMap="; (obj.__isset.extMap ? (out << to_string(obj.extMap)) : (out << "<null>"));
  out << ", " << "traceid="; (obj.__isset.traceid ? (out << to_string(obj.traceid)) : (out << "<null>"));
  out << ", " << "spanid="; (obj.__isset.spanid ? (out << to_string(obj.spanid)) : (out << "<null>"));
  out << ", " << "trace_info="; (obj.__isset.trace_info ? (out << to_string(obj.trace_info)) : (out << "<null>"));
  out << ")";
  return out;
}


GetForecastFeatureResponse::~GetForecastFeatureResponse() throw() {
}


void GetForecastFeatureResponse::__set_error_code(const int32_t val) {
  this->error_code = val;
}

void GetForecastFeatureResponse::__set_error_msg(const std::string& val) {
  this->error_msg = val;
}

void GetForecastFeatureResponse::__set_forecastFeature(const std::map<std::string, double> & val) {
  this->forecastFeature = val;
}

const char* GetForecastFeatureResponse::ascii_fingerprint = "CF8E34C3B013B8FBCDA7987E6BC40786";
const uint8_t GetForecastFeatureResponse::binary_fingerprint[16] = {0xCF,0x8E,0x34,0xC3,0xB0,0x13,0xB8,0xFB,0xCD,0xA7,0x98,0x7E,0x6B,0xC4,0x07,0x86};

uint32_t GetForecastFeatureResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_error_code = false;
  bool isset_error_msg = false;
  bool isset_forecastFeature = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->error_code);
          isset_error_code = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->error_msg);
          isset_error_msg = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->forecastFeature.clear();
            uint32_t _size73;
            ::apache::thrift::protocol::TType _ktype74;
            ::apache::thrift::protocol::TType _vtype75;
            xfer += iprot->readMapBegin(_ktype74, _vtype75, _size73);
            uint32_t _i77;
            for (_i77 = 0; _i77 < _size73; ++_i77)
            {
              std::string _key78;
              xfer += iprot->readString(_key78);
              double& _val79 = this->forecastFeature[_key78];
              xfer += iprot->readDouble(_val79);
            }
            xfer += iprot->readMapEnd();
          }
          isset_forecastFeature = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_error_code)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_error_msg)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_forecastFeature)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t GetForecastFeatureResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("GetForecastFeatureResponse");

  xfer += oprot->writeFieldBegin("error_code", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->error_code);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("error_msg", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->error_msg);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("forecastFeature", ::apache::thrift::protocol::T_MAP, 3);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_DOUBLE, static_cast<uint32_t>(this->forecastFeature.size()));
    std::map<std::string, double> ::const_iterator _iter80;
    for (_iter80 = this->forecastFeature.begin(); _iter80 != this->forecastFeature.end(); ++_iter80)
    {
      xfer += oprot->writeString(_iter80->first);
      xfer += oprot->writeDouble(_iter80->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(GetForecastFeatureResponse &a, GetForecastFeatureResponse &b) {
  using ::std::swap;
  swap(a.error_code, b.error_code);
  swap(a.error_msg, b.error_msg);
  swap(a.forecastFeature, b.forecastFeature);
}

GetForecastFeatureResponse::GetForecastFeatureResponse(const GetForecastFeatureResponse& other81) {
  error_code = other81.error_code;
  error_msg = other81.error_msg;
  forecastFeature = other81.forecastFeature;
}
GetForecastFeatureResponse& GetForecastFeatureResponse::operator=(const GetForecastFeatureResponse& other82) {
  error_code = other82.error_code;
  error_msg = other82.error_msg;
  forecastFeature = other82.forecastFeature;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const GetForecastFeatureResponse& obj) {
  using apache::thrift::to_string;
  out << "GetForecastFeatureResponse(";
  out << "error_code=" << to_string(obj.error_code);
  out << ", " << "error_msg=" << to_string(obj.error_msg);
  out << ", " << "forecastFeature=" << to_string(obj.forecastFeature);
  out << ")";
  return out;
}


ProductType::~ProductType() throw() {
}


void ProductType::__set_product_id(const std::string& val) {
  this->product_id = val;
__isset.product_id = true;
}

void ProductType::__set_combo_type(const int16_t val) {
  this->combo_type = val;
__isset.combo_type = true;
}

void ProductType::__set_require_level(const std::string& val) {
  this->require_level = val;
__isset.require_level = true;
}

const char* ProductType::ascii_fingerprint = "D0B01547DD71CCE7ED280A08ECC7D976";
const uint8_t ProductType::binary_fingerprint[16] = {0xD0,0xB0,0x15,0x47,0xDD,0x71,0xCC,0xE7,0xED,0x28,0x0A,0x08,0xEC,0xC7,0xD9,0x76};

uint32_t ProductType::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->product_id);
          this->__isset.product_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->combo_type);
          this->__isset.combo_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->require_level);
          this->__isset.require_level = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ProductType::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("ProductType");

  if (this->__isset.product_id) {
    xfer += oprot->writeFieldBegin("product_id", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString(this->product_id);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.combo_type) {
    xfer += oprot->writeFieldBegin("combo_type", ::apache::thrift::protocol::T_I16, 2);
    xfer += oprot->writeI16(this->combo_type);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.require_level) {
    xfer += oprot->writeFieldBegin("require_level", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->require_level);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(ProductType &a, ProductType &b) {
  using ::std::swap;
  swap(a.product_id, b.product_id);
  swap(a.combo_type, b.combo_type);
  swap(a.require_level, b.require_level);
  swap(a.__isset, b.__isset);
}

ProductType::ProductType(const ProductType& other83) {
  product_id = other83.product_id;
  combo_type = other83.combo_type;
  require_level = other83.require_level;
  __isset = other83.__isset;
}
ProductType& ProductType::operator=(const ProductType& other84) {
  product_id = other84.product_id;
  combo_type = other84.combo_type;
  require_level = other84.require_level;
  __isset = other84.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const ProductType& obj) {
  using apache::thrift::to_string;
  out << "ProductType(";
  out << "product_id="; (obj.__isset.product_id ? (out << to_string(obj.product_id)) : (out << "<null>"));
  out << ", " << "combo_type="; (obj.__isset.combo_type ? (out << to_string(obj.combo_type)) : (out << "<null>"));
  out << ", " << "require_level="; (obj.__isset.require_level ? (out << to_string(obj.require_level)) : (out << "<null>"));
  out << ")";
  return out;
}


PrematchhHoldInfoRequest::~PrematchhHoldInfoRequest() throw() {
}


void PrematchhHoldInfoRequest::__set_phone(const std::string& val) {
  this->phone = val;
}

void PrematchhHoldInfoRequest::__set_pid(const std::string& val) {
  this->pid = val;
}

void PrematchhHoldInfoRequest::__set_city_id(const int32_t val) {
  this->city_id = val;
}

void PrematchhHoldInfoRequest::__set_cur_lng(const double val) {
  this->cur_lng = val;
}

void PrematchhHoldInfoRequest::__set_cur_lat(const double val) {
  this->cur_lat = val;
}

void PrematchhHoldInfoRequest::__set_start_lng(const double val) {
  this->start_lng = val;
}

void PrematchhHoldInfoRequest::__set_start_lat(const double val) {
  this->start_lat = val;
}

void PrematchhHoldInfoRequest::__set_start_name(const std::string& val) {
  this->start_name = val;
}

void PrematchhHoldInfoRequest::__set_dest_lng(const double val) {
  this->dest_lng = val;
}

void PrematchhHoldInfoRequest::__set_dest_lat(const double val) {
  this->dest_lat = val;
}

void PrematchhHoldInfoRequest::__set_dest_name(const std::string& val) {
  this->dest_name = val;
}

void PrematchhHoldInfoRequest::__set_traceid(const std::string& val) {
  this->traceid = val;
}

void PrematchhHoldInfoRequest::__set_extMap(const std::map<std::string, std::string> & val) {
  this->extMap = val;
__isset.extMap = true;
}

void PrematchhHoldInfoRequest::__set_productReq(const std::vector<ProductType> & val) {
  this->productReq = val;
__isset.productReq = true;
}

void PrematchhHoldInfoRequest::__set_trace_info(const Trace& val) {
  this->trace_info = val;
__isset.trace_info = true;
}

const char* PrematchhHoldInfoRequest::ascii_fingerprint = "2AB0262763726E78564DFF21A1867B3E";
const uint8_t PrematchhHoldInfoRequest::binary_fingerprint[16] = {0x2A,0xB0,0x26,0x27,0x63,0x72,0x6E,0x78,0x56,0x4D,0xFF,0x21,0xA1,0x86,0x7B,0x3E};

uint32_t PrematchhHoldInfoRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_phone = false;
  bool isset_pid = false;
  bool isset_city_id = false;
  bool isset_cur_lng = false;
  bool isset_cur_lat = false;
  bool isset_start_lng = false;
  bool isset_start_lat = false;
  bool isset_start_name = false;
  bool isset_dest_lng = false;
  bool isset_dest_lat = false;
  bool isset_dest_name = false;
  bool isset_traceid = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->phone);
          isset_phone = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->pid);
          isset_pid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->city_id);
          isset_city_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->cur_lng);
          isset_cur_lng = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->cur_lat);
          isset_cur_lat = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->start_lng);
          isset_start_lng = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->start_lat);
          isset_start_lat = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->start_name);
          isset_start_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->dest_lng);
          isset_dest_lng = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->dest_lat);
          isset_dest_lat = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->dest_name);
          isset_dest_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->traceid);
          isset_traceid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->extMap.clear();
            uint32_t _size85;
            ::apache::thrift::protocol::TType _ktype86;
            ::apache::thrift::protocol::TType _vtype87;
            xfer += iprot->readMapBegin(_ktype86, _vtype87, _size85);
            uint32_t _i89;
            for (_i89 = 0; _i89 < _size85; ++_i89)
            {
              std::string _key90;
              xfer += iprot->readString(_key90);
              std::string& _val91 = this->extMap[_key90];
              xfer += iprot->readString(_val91);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.extMap = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->productReq.clear();
            uint32_t _size92;
            ::apache::thrift::protocol::TType _etype95;
            xfer += iprot->readListBegin(_etype95, _size92);
            this->productReq.resize(_size92);
            uint32_t _i96;
            for (_i96 = 0; _i96 < _size92; ++_i96)
            {
              xfer += this->productReq[_i96].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.productReq = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 20:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->trace_info.read(iprot);
          this->__isset.trace_info = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_phone)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_pid)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_city_id)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_cur_lng)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_cur_lat)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_start_lng)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_start_lat)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_start_name)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_dest_lng)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_dest_lat)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_dest_name)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_traceid)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t PrematchhHoldInfoRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("PrematchhHoldInfoRequest");

  xfer += oprot->writeFieldBegin("phone", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->phone);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("pid", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->pid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("city_id", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->city_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("cur_lng", ::apache::thrift::protocol::T_DOUBLE, 4);
  xfer += oprot->writeDouble(this->cur_lng);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("cur_lat", ::apache::thrift::protocol::T_DOUBLE, 5);
  xfer += oprot->writeDouble(this->cur_lat);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("start_lng", ::apache::thrift::protocol::T_DOUBLE, 6);
  xfer += oprot->writeDouble(this->start_lng);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("start_lat", ::apache::thrift::protocol::T_DOUBLE, 7);
  xfer += oprot->writeDouble(this->start_lat);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("start_name", ::apache::thrift::protocol::T_STRING, 8);
  xfer += oprot->writeString(this->start_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dest_lng", ::apache::thrift::protocol::T_DOUBLE, 9);
  xfer += oprot->writeDouble(this->dest_lng);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dest_lat", ::apache::thrift::protocol::T_DOUBLE, 10);
  xfer += oprot->writeDouble(this->dest_lat);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dest_name", ::apache::thrift::protocol::T_STRING, 11);
  xfer += oprot->writeString(this->dest_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("traceid", ::apache::thrift::protocol::T_STRING, 12);
  xfer += oprot->writeString(this->traceid);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.extMap) {
    xfer += oprot->writeFieldBegin("extMap", ::apache::thrift::protocol::T_MAP, 13);
    {
      xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->extMap.size()));
      std::map<std::string, std::string> ::const_iterator _iter97;
      for (_iter97 = this->extMap.begin(); _iter97 != this->extMap.end(); ++_iter97)
      {
        xfer += oprot->writeString(_iter97->first);
        xfer += oprot->writeString(_iter97->second);
      }
      xfer += oprot->writeMapEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.productReq) {
    xfer += oprot->writeFieldBegin("productReq", ::apache::thrift::protocol::T_LIST, 14);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->productReq.size()));
      std::vector<ProductType> ::const_iterator _iter98;
      for (_iter98 = this->productReq.begin(); _iter98 != this->productReq.end(); ++_iter98)
      {
        xfer += (*_iter98).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.trace_info) {
    xfer += oprot->writeFieldBegin("trace_info", ::apache::thrift::protocol::T_STRUCT, 20);
    xfer += this->trace_info.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(PrematchhHoldInfoRequest &a, PrematchhHoldInfoRequest &b) {
  using ::std::swap;
  swap(a.phone, b.phone);
  swap(a.pid, b.pid);
  swap(a.city_id, b.city_id);
  swap(a.cur_lng, b.cur_lng);
  swap(a.cur_lat, b.cur_lat);
  swap(a.start_lng, b.start_lng);
  swap(a.start_lat, b.start_lat);
  swap(a.start_name, b.start_name);
  swap(a.dest_lng, b.dest_lng);
  swap(a.dest_lat, b.dest_lat);
  swap(a.dest_name, b.dest_name);
  swap(a.traceid, b.traceid);
  swap(a.extMap, b.extMap);
  swap(a.productReq, b.productReq);
  swap(a.trace_info, b.trace_info);
  swap(a.__isset, b.__isset);
}

PrematchhHoldInfoRequest::PrematchhHoldInfoRequest(const PrematchhHoldInfoRequest& other99) {
  phone = other99.phone;
  pid = other99.pid;
  city_id = other99.city_id;
  cur_lng = other99.cur_lng;
  cur_lat = other99.cur_lat;
  start_lng = other99.start_lng;
  start_lat = other99.start_lat;
  start_name = other99.start_name;
  dest_lng = other99.dest_lng;
  dest_lat = other99.dest_lat;
  dest_name = other99.dest_name;
  traceid = other99.traceid;
  extMap = other99.extMap;
  productReq = other99.productReq;
  trace_info = other99.trace_info;
  __isset = other99.__isset;
}
PrematchhHoldInfoRequest& PrematchhHoldInfoRequest::operator=(const PrematchhHoldInfoRequest& other100) {
  phone = other100.phone;
  pid = other100.pid;
  city_id = other100.city_id;
  cur_lng = other100.cur_lng;
  cur_lat = other100.cur_lat;
  start_lng = other100.start_lng;
  start_lat = other100.start_lat;
  start_name = other100.start_name;
  dest_lng = other100.dest_lng;
  dest_lat = other100.dest_lat;
  dest_name = other100.dest_name;
  traceid = other100.traceid;
  extMap = other100.extMap;
  productReq = other100.productReq;
  trace_info = other100.trace_info;
  __isset = other100.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const PrematchhHoldInfoRequest& obj) {
  using apache::thrift::to_string;
  out << "PrematchhHoldInfoRequest(";
  out << "phone=" << to_string(obj.phone);
  out << ", " << "pid=" << to_string(obj.pid);
  out << ", " << "city_id=" << to_string(obj.city_id);
  out << ", " << "cur_lng=" << to_string(obj.cur_lng);
  out << ", " << "cur_lat=" << to_string(obj.cur_lat);
  out << ", " << "start_lng=" << to_string(obj.start_lng);
  out << ", " << "start_lat=" << to_string(obj.start_lat);
  out << ", " << "start_name=" << to_string(obj.start_name);
  out << ", " << "dest_lng=" << to_string(obj.dest_lng);
  out << ", " << "dest_lat=" << to_string(obj.dest_lat);
  out << ", " << "dest_name=" << to_string(obj.dest_name);
  out << ", " << "traceid=" << to_string(obj.traceid);
  out << ", " << "extMap="; (obj.__isset.extMap ? (out << to_string(obj.extMap)) : (out << "<null>"));
  out << ", " << "productReq="; (obj.__isset.productReq ? (out << to_string(obj.productReq)) : (out << "<null>"));
  out << ", " << "trace_info="; (obj.__isset.trace_info ? (out << to_string(obj.trace_info)) : (out << "<null>"));
  out << ")";
  return out;
}


PrematchHoldRes::~PrematchHoldRes() throw() {
}


void PrematchHoldRes::__set_error_code(const int32_t val) {
  this->error_code = val;
}

void PrematchHoldRes::__set_error_msg(const std::string& val) {
  this->error_msg = val;
}

void PrematchHoldRes::__set_require_level(const std::string& val) {
  this->require_level = val;
__isset.require_level = true;
}

void PrematchHoldRes::__set_hold_time(const int32_t val) {
  this->hold_time = val;
__isset.hold_time = true;
}

void PrematchHoldRes::__set_hit_hold(const int32_t val) {
  this->hit_hold = val;
__isset.hit_hold = true;
}

void PrematchHoldRes::__set_hold_time_select(const int32_t val) {
  this->hold_time_select = val;
__isset.hold_time_select = true;
}

void PrematchHoldRes::__set_product_info(const ProductType& val) {
  this->product_info = val;
__isset.product_info = true;
}

const char* PrematchHoldRes::ascii_fingerprint = "461F16B34D7D3641D7570A1F391C6993";
const uint8_t PrematchHoldRes::binary_fingerprint[16] = {0x46,0x1F,0x16,0xB3,0x4D,0x7D,0x36,0x41,0xD7,0x57,0x0A,0x1F,0x39,0x1C,0x69,0x93};

uint32_t PrematchHoldRes::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_error_code = false;
  bool isset_error_msg = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->error_code);
          isset_error_code = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->error_msg);
          isset_error_msg = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->require_level);
          this->__isset.require_level = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->hold_time);
          this->__isset.hold_time = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->hit_hold);
          this->__isset.hit_hold = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->hold_time_select);
          this->__isset.hold_time_select = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->product_info.read(iprot);
          this->__isset.product_info = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_error_code)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_error_msg)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t PrematchHoldRes::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("PrematchHoldRes");

  xfer += oprot->writeFieldBegin("error_code", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->error_code);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("error_msg", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->error_msg);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.require_level) {
    xfer += oprot->writeFieldBegin("require_level", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->require_level);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.hold_time) {
    xfer += oprot->writeFieldBegin("hold_time", ::apache::thrift::protocol::T_I32, 4);
    xfer += oprot->writeI32(this->hold_time);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.hit_hold) {
    xfer += oprot->writeFieldBegin("hit_hold", ::apache::thrift::protocol::T_I32, 5);
    xfer += oprot->writeI32(this->hit_hold);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.hold_time_select) {
    xfer += oprot->writeFieldBegin("hold_time_select", ::apache::thrift::protocol::T_I32, 6);
    xfer += oprot->writeI32(this->hold_time_select);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.product_info) {
    xfer += oprot->writeFieldBegin("product_info", ::apache::thrift::protocol::T_STRUCT, 7);
    xfer += this->product_info.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(PrematchHoldRes &a, PrematchHoldRes &b) {
  using ::std::swap;
  swap(a.error_code, b.error_code);
  swap(a.error_msg, b.error_msg);
  swap(a.require_level, b.require_level);
  swap(a.hold_time, b.hold_time);
  swap(a.hit_hold, b.hit_hold);
  swap(a.hold_time_select, b.hold_time_select);
  swap(a.product_info, b.product_info);
  swap(a.__isset, b.__isset);
}

PrematchHoldRes::PrematchHoldRes(const PrematchHoldRes& other101) {
  error_code = other101.error_code;
  error_msg = other101.error_msg;
  require_level = other101.require_level;
  hold_time = other101.hold_time;
  hit_hold = other101.hit_hold;
  hold_time_select = other101.hold_time_select;
  product_info = other101.product_info;
  __isset = other101.__isset;
}
PrematchHoldRes& PrematchHoldRes::operator=(const PrematchHoldRes& other102) {
  error_code = other102.error_code;
  error_msg = other102.error_msg;
  require_level = other102.require_level;
  hold_time = other102.hold_time;
  hit_hold = other102.hit_hold;
  hold_time_select = other102.hold_time_select;
  product_info = other102.product_info;
  __isset = other102.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const PrematchHoldRes& obj) {
  using apache::thrift::to_string;
  out << "PrematchHoldRes(";
  out << "error_code=" << to_string(obj.error_code);
  out << ", " << "error_msg=" << to_string(obj.error_msg);
  out << ", " << "require_level="; (obj.__isset.require_level ? (out << to_string(obj.require_level)) : (out << "<null>"));
  out << ", " << "hold_time="; (obj.__isset.hold_time ? (out << to_string(obj.hold_time)) : (out << "<null>"));
  out << ", " << "hit_hold="; (obj.__isset.hit_hold ? (out << to_string(obj.hit_hold)) : (out << "<null>"));
  out << ", " << "hold_time_select="; (obj.__isset.hold_time_select ? (out << to_string(obj.hold_time_select)) : (out << "<null>"));
  out << ", " << "product_info="; (obj.__isset.product_info ? (out << to_string(obj.product_info)) : (out << "<null>"));
  out << ")";
  return out;
}


PrematchhHoldInfoResponse::~PrematchhHoldInfoResponse() throw() {
}


void PrematchhHoldInfoResponse::__set_error_code(const int32_t val) {
  this->error_code = val;
}

void PrematchhHoldInfoResponse::__set_error_msg(const std::string& val) {
  this->error_msg = val;
}

void PrematchhHoldInfoResponse::__set_hold_time(const int32_t val) {
  this->hold_time = val;
__isset.hold_time = true;
}

void PrematchhHoldInfoResponse::__set_hit_hold(const int32_t val) {
  this->hit_hold = val;
__isset.hit_hold = true;
}

void PrematchhHoldInfoResponse::__set_hold_time_select(const int32_t val) {
  this->hold_time_select = val;
__isset.hold_time_select = true;
}

void PrematchhHoldInfoResponse::__set_holdResults(const std::vector<PrematchHoldRes> & val) {
  this->holdResults = val;
__isset.holdResults = true;
}

const char* PrematchhHoldInfoResponse::ascii_fingerprint = "80CE7C4CC30B155F3642BCB53BD22EDC";
const uint8_t PrematchhHoldInfoResponse::binary_fingerprint[16] = {0x80,0xCE,0x7C,0x4C,0xC3,0x0B,0x15,0x5F,0x36,0x42,0xBC,0xB5,0x3B,0xD2,0x2E,0xDC};

uint32_t PrematchhHoldInfoResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_error_code = false;
  bool isset_error_msg = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->error_code);
          isset_error_code = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->error_msg);
          isset_error_msg = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->hold_time);
          this->__isset.hold_time = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->hit_hold);
          this->__isset.hit_hold = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->hold_time_select);
          this->__isset.hold_time_select = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->holdResults.clear();
            uint32_t _size103;
            ::apache::thrift::protocol::TType _etype106;
            xfer += iprot->readListBegin(_etype106, _size103);
            this->holdResults.resize(_size103);
            uint32_t _i107;
            for (_i107 = 0; _i107 < _size103; ++_i107)
            {
              xfer += this->holdResults[_i107].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.holdResults = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_error_code)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_error_msg)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t PrematchhHoldInfoResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("PrematchhHoldInfoResponse");

  xfer += oprot->writeFieldBegin("error_code", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->error_code);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("error_msg", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->error_msg);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.hold_time) {
    xfer += oprot->writeFieldBegin("hold_time", ::apache::thrift::protocol::T_I32, 3);
    xfer += oprot->writeI32(this->hold_time);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.hit_hold) {
    xfer += oprot->writeFieldBegin("hit_hold", ::apache::thrift::protocol::T_I32, 4);
    xfer += oprot->writeI32(this->hit_hold);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.hold_time_select) {
    xfer += oprot->writeFieldBegin("hold_time_select", ::apache::thrift::protocol::T_I32, 5);
    xfer += oprot->writeI32(this->hold_time_select);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.holdResults) {
    xfer += oprot->writeFieldBegin("holdResults", ::apache::thrift::protocol::T_LIST, 6);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->holdResults.size()));
      std::vector<PrematchHoldRes> ::const_iterator _iter108;
      for (_iter108 = this->holdResults.begin(); _iter108 != this->holdResults.end(); ++_iter108)
      {
        xfer += (*_iter108).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(PrematchhHoldInfoResponse &a, PrematchhHoldInfoResponse &b) {
  using ::std::swap;
  swap(a.error_code, b.error_code);
  swap(a.error_msg, b.error_msg);
  swap(a.hold_time, b.hold_time);
  swap(a.hit_hold, b.hit_hold);
  swap(a.hold_time_select, b.hold_time_select);
  swap(a.holdResults, b.holdResults);
  swap(a.__isset, b.__isset);
}

PrematchhHoldInfoResponse::PrematchhHoldInfoResponse(const PrematchhHoldInfoResponse& other109) {
  error_code = other109.error_code;
  error_msg = other109.error_msg;
  hold_time = other109.hold_time;
  hit_hold = other109.hit_hold;
  hold_time_select = other109.hold_time_select;
  holdResults = other109.holdResults;
  __isset = other109.__isset;
}
PrematchhHoldInfoResponse& PrematchhHoldInfoResponse::operator=(const PrematchhHoldInfoResponse& other110) {
  error_code = other110.error_code;
  error_msg = other110.error_msg;
  hold_time = other110.hold_time;
  hit_hold = other110.hit_hold;
  hold_time_select = other110.hold_time_select;
  holdResults = other110.holdResults;
  __isset = other110.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const PrematchhHoldInfoResponse& obj) {
  using apache::thrift::to_string;
  out << "PrematchhHoldInfoResponse(";
  out << "error_code=" << to_string(obj.error_code);
  out << ", " << "error_msg=" << to_string(obj.error_msg);
  out << ", " << "hold_time="; (obj.__isset.hold_time ? (out << to_string(obj.hold_time)) : (out << "<null>"));
  out << ", " << "hit_hold="; (obj.__isset.hit_hold ? (out << to_string(obj.hit_hold)) : (out << "<null>"));
  out << ", " << "hold_time_select="; (obj.__isset.hold_time_select ? (out << to_string(obj.hold_time_select)) : (out << "<null>"));
  out << ", " << "holdResults="; (obj.__isset.holdResults ? (out << to_string(obj.holdResults)) : (out << "<null>"));
  out << ")";
  return out;
}


PrematchStationRes::~PrematchStationRes() throw() {
}


void PrematchStationRes::__set_error_code(const int32_t val) {
  this->error_code = val;
}

void PrematchStationRes::__set_error_msg(const std::string& val) {
  this->error_msg = val;
}

void PrematchStationRes::__set_product_info(const ProductType& val) {
  this->product_info = val;
}

void PrematchStationRes::__set_station_list(const std::vector<StationInfo> & val) {
  this->station_list = val;
}

void PrematchStationRes::__set_extMap(const std::map<std::string, std::string> & val) {
  this->extMap = val;
__isset.extMap = true;
}

const char* PrematchStationRes::ascii_fingerprint = "C8940ABA1BA90F63E2081F6155F3561F";
const uint8_t PrematchStationRes::binary_fingerprint[16] = {0xC8,0x94,0x0A,0xBA,0x1B,0xA9,0x0F,0x63,0xE2,0x08,0x1F,0x61,0x55,0xF3,0x56,0x1F};

uint32_t PrematchStationRes::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_error_code = false;
  bool isset_error_msg = false;
  bool isset_product_info = false;
  bool isset_station_list = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->error_code);
          isset_error_code = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->error_msg);
          isset_error_msg = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->product_info.read(iprot);
          isset_product_info = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->station_list.clear();
            uint32_t _size111;
            ::apache::thrift::protocol::TType _etype114;
            xfer += iprot->readListBegin(_etype114, _size111);
            this->station_list.resize(_size111);
            uint32_t _i115;
            for (_i115 = 0; _i115 < _size111; ++_i115)
            {
              xfer += this->station_list[_i115].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          isset_station_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->extMap.clear();
            uint32_t _size116;
            ::apache::thrift::protocol::TType _ktype117;
            ::apache::thrift::protocol::TType _vtype118;
            xfer += iprot->readMapBegin(_ktype117, _vtype118, _size116);
            uint32_t _i120;
            for (_i120 = 0; _i120 < _size116; ++_i120)
            {
              std::string _key121;
              xfer += iprot->readString(_key121);
              std::string& _val122 = this->extMap[_key121];
              xfer += iprot->readString(_val122);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.extMap = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_error_code)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_error_msg)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_product_info)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_station_list)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t PrematchStationRes::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("PrematchStationRes");

  xfer += oprot->writeFieldBegin("error_code", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->error_code);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("error_msg", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->error_msg);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("product_info", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->product_info.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("station_list", ::apache::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->station_list.size()));
    std::vector<StationInfo> ::const_iterator _iter123;
    for (_iter123 = this->station_list.begin(); _iter123 != this->station_list.end(); ++_iter123)
    {
      xfer += (*_iter123).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  if (this->__isset.extMap) {
    xfer += oprot->writeFieldBegin("extMap", ::apache::thrift::protocol::T_MAP, 5);
    {
      xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->extMap.size()));
      std::map<std::string, std::string> ::const_iterator _iter124;
      for (_iter124 = this->extMap.begin(); _iter124 != this->extMap.end(); ++_iter124)
      {
        xfer += oprot->writeString(_iter124->first);
        xfer += oprot->writeString(_iter124->second);
      }
      xfer += oprot->writeMapEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(PrematchStationRes &a, PrematchStationRes &b) {
  using ::std::swap;
  swap(a.error_code, b.error_code);
  swap(a.error_msg, b.error_msg);
  swap(a.product_info, b.product_info);
  swap(a.station_list, b.station_list);
  swap(a.extMap, b.extMap);
  swap(a.__isset, b.__isset);
}

PrematchStationRes::PrematchStationRes(const PrematchStationRes& other125) {
  error_code = other125.error_code;
  error_msg = other125.error_msg;
  product_info = other125.product_info;
  station_list = other125.station_list;
  extMap = other125.extMap;
  __isset = other125.__isset;
}
PrematchStationRes& PrematchStationRes::operator=(const PrematchStationRes& other126) {
  error_code = other126.error_code;
  error_msg = other126.error_msg;
  product_info = other126.product_info;
  station_list = other126.station_list;
  extMap = other126.extMap;
  __isset = other126.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const PrematchStationRes& obj) {
  using apache::thrift::to_string;
  out << "PrematchStationRes(";
  out << "error_code=" << to_string(obj.error_code);
  out << ", " << "error_msg=" << to_string(obj.error_msg);
  out << ", " << "product_info=" << to_string(obj.product_info);
  out << ", " << "station_list=" << to_string(obj.station_list);
  out << ", " << "extMap="; (obj.__isset.extMap ? (out << to_string(obj.extMap)) : (out << "<null>"));
  out << ")";
  return out;
}


PrematchEtdRes::~PrematchEtdRes() throw() {
}


void PrematchEtdRes::__set_error_code(const int32_t val) {
  this->error_code = val;
}

void PrematchEtdRes::__set_error_msg(const std::string& val) {
  this->error_msg = val;
}

void PrematchEtdRes::__set_product_info(const ProductType& val) {
  this->product_info = val;
}

void PrematchEtdRes::__set_etd_info(const CarpoolEtdInfo& val) {
  this->etd_info = val;
}

void PrematchEtdRes::__set_extMap(const std::map<std::string, std::string> & val) {
  this->extMap = val;
__isset.extMap = true;
}

const char* PrematchEtdRes::ascii_fingerprint = "A467D19E8DDF71D3CBBF4E7844FF520C";
const uint8_t PrematchEtdRes::binary_fingerprint[16] = {0xA4,0x67,0xD1,0x9E,0x8D,0xDF,0x71,0xD3,0xCB,0xBF,0x4E,0x78,0x44,0xFF,0x52,0x0C};

uint32_t PrematchEtdRes::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_error_code = false;
  bool isset_error_msg = false;
  bool isset_product_info = false;
  bool isset_etd_info = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->error_code);
          isset_error_code = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->error_msg);
          isset_error_msg = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->product_info.read(iprot);
          isset_product_info = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->etd_info.read(iprot);
          isset_etd_info = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->extMap.clear();
            uint32_t _size127;
            ::apache::thrift::protocol::TType _ktype128;
            ::apache::thrift::protocol::TType _vtype129;
            xfer += iprot->readMapBegin(_ktype128, _vtype129, _size127);
            uint32_t _i131;
            for (_i131 = 0; _i131 < _size127; ++_i131)
            {
              std::string _key132;
              xfer += iprot->readString(_key132);
              std::string& _val133 = this->extMap[_key132];
              xfer += iprot->readString(_val133);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.extMap = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_error_code)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_error_msg)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_product_info)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_etd_info)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t PrematchEtdRes::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("PrematchEtdRes");

  xfer += oprot->writeFieldBegin("error_code", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->error_code);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("error_msg", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->error_msg);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("product_info", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->product_info.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("etd_info", ::apache::thrift::protocol::T_STRUCT, 4);
  xfer += this->etd_info.write(oprot);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.extMap) {
    xfer += oprot->writeFieldBegin("extMap", ::apache::thrift::protocol::T_MAP, 5);
    {
      xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->extMap.size()));
      std::map<std::string, std::string> ::const_iterator _iter134;
      for (_iter134 = this->extMap.begin(); _iter134 != this->extMap.end(); ++_iter134)
      {
        xfer += oprot->writeString(_iter134->first);
        xfer += oprot->writeString(_iter134->second);
      }
      xfer += oprot->writeMapEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(PrematchEtdRes &a, PrematchEtdRes &b) {
  using ::std::swap;
  swap(a.error_code, b.error_code);
  swap(a.error_msg, b.error_msg);
  swap(a.product_info, b.product_info);
  swap(a.etd_info, b.etd_info);
  swap(a.extMap, b.extMap);
  swap(a.__isset, b.__isset);
}

PrematchEtdRes::PrematchEtdRes(const PrematchEtdRes& other135) {
  error_code = other135.error_code;
  error_msg = other135.error_msg;
  product_info = other135.product_info;
  etd_info = other135.etd_info;
  extMap = other135.extMap;
  __isset = other135.__isset;
}
PrematchEtdRes& PrematchEtdRes::operator=(const PrematchEtdRes& other136) {
  error_code = other136.error_code;
  error_msg = other136.error_msg;
  product_info = other136.product_info;
  etd_info = other136.etd_info;
  extMap = other136.extMap;
  __isset = other136.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const PrematchEtdRes& obj) {
  using apache::thrift::to_string;
  out << "PrematchEtdRes(";
  out << "error_code=" << to_string(obj.error_code);
  out << ", " << "error_msg=" << to_string(obj.error_msg);
  out << ", " << "product_info=" << to_string(obj.product_info);
  out << ", " << "etd_info=" << to_string(obj.etd_info);
  out << ", " << "extMap="; (obj.__isset.extMap ? (out << to_string(obj.extMap)) : (out << "<null>"));
  out << ")";
  return out;
}


PrematchRecommendRequest::~PrematchRecommendRequest() throw() {
}


void PrematchRecommendRequest::__set_phone(const std::string& val) {
  this->phone = val;
}

void PrematchRecommendRequest::__set_pid(const std::string& val) {
  this->pid = val;
}

void PrematchRecommendRequest::__set_city_id(const int32_t val) {
  this->city_id = val;
}

void PrematchRecommendRequest::__set_cur_lng(const double val) {
  this->cur_lng = val;
}

void PrematchRecommendRequest::__set_cur_lat(const double val) {
  this->cur_lat = val;
}

void PrematchRecommendRequest::__set_start_lng(const double val) {
  this->start_lng = val;
}

void PrematchRecommendRequest::__set_start_lat(const double val) {
  this->start_lat = val;
}

void PrematchRecommendRequest::__set_start_name(const std::string& val) {
  this->start_name = val;
}

void PrematchRecommendRequest::__set_dest_lng(const double val) {
  this->dest_lng = val;
}

void PrematchRecommendRequest::__set_dest_lat(const double val) {
  this->dest_lat = val;
}

void PrematchRecommendRequest::__set_dest_name(const std::string& val) {
  this->dest_name = val;
}

void PrematchRecommendRequest::__set_traceid(const std::string& val) {
  this->traceid = val;
}

void PrematchRecommendRequest::__set_extMap(const std::map<std::string, std::string> & val) {
  this->extMap = val;
__isset.extMap = true;
}

void PrematchRecommendRequest::__set_productReq(const std::vector<ProductType> & val) {
  this->productReq = val;
__isset.productReq = true;
}

void PrematchRecommendRequest::__set_trace_info(const Trace& val) {
  this->trace_info = val;
__isset.trace_info = true;
}

const char* PrematchRecommendRequest::ascii_fingerprint = "2AB0262763726E78564DFF21A1867B3E";
const uint8_t PrematchRecommendRequest::binary_fingerprint[16] = {0x2A,0xB0,0x26,0x27,0x63,0x72,0x6E,0x78,0x56,0x4D,0xFF,0x21,0xA1,0x86,0x7B,0x3E};

uint32_t PrematchRecommendRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_phone = false;
  bool isset_pid = false;
  bool isset_city_id = false;
  bool isset_cur_lng = false;
  bool isset_cur_lat = false;
  bool isset_start_lng = false;
  bool isset_start_lat = false;
  bool isset_start_name = false;
  bool isset_dest_lng = false;
  bool isset_dest_lat = false;
  bool isset_dest_name = false;
  bool isset_traceid = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->phone);
          isset_phone = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->pid);
          isset_pid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->city_id);
          isset_city_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->cur_lng);
          isset_cur_lng = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->cur_lat);
          isset_cur_lat = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->start_lng);
          isset_start_lng = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->start_lat);
          isset_start_lat = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->start_name);
          isset_start_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->dest_lng);
          isset_dest_lng = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->dest_lat);
          isset_dest_lat = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->dest_name);
          isset_dest_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->traceid);
          isset_traceid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->extMap.clear();
            uint32_t _size137;
            ::apache::thrift::protocol::TType _ktype138;
            ::apache::thrift::protocol::TType _vtype139;
            xfer += iprot->readMapBegin(_ktype138, _vtype139, _size137);
            uint32_t _i141;
            for (_i141 = 0; _i141 < _size137; ++_i141)
            {
              std::string _key142;
              xfer += iprot->readString(_key142);
              std::string& _val143 = this->extMap[_key142];
              xfer += iprot->readString(_val143);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.extMap = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->productReq.clear();
            uint32_t _size144;
            ::apache::thrift::protocol::TType _etype147;
            xfer += iprot->readListBegin(_etype147, _size144);
            this->productReq.resize(_size144);
            uint32_t _i148;
            for (_i148 = 0; _i148 < _size144; ++_i148)
            {
              xfer += this->productReq[_i148].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.productReq = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 20:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->trace_info.read(iprot);
          this->__isset.trace_info = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_phone)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_pid)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_city_id)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_cur_lng)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_cur_lat)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_start_lng)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_start_lat)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_start_name)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_dest_lng)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_dest_lat)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_dest_name)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_traceid)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t PrematchRecommendRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("PrematchRecommendRequest");

  xfer += oprot->writeFieldBegin("phone", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->phone);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("pid", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->pid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("city_id", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->city_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("cur_lng", ::apache::thrift::protocol::T_DOUBLE, 4);
  xfer += oprot->writeDouble(this->cur_lng);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("cur_lat", ::apache::thrift::protocol::T_DOUBLE, 5);
  xfer += oprot->writeDouble(this->cur_lat);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("start_lng", ::apache::thrift::protocol::T_DOUBLE, 6);
  xfer += oprot->writeDouble(this->start_lng);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("start_lat", ::apache::thrift::protocol::T_DOUBLE, 7);
  xfer += oprot->writeDouble(this->start_lat);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("start_name", ::apache::thrift::protocol::T_STRING, 8);
  xfer += oprot->writeString(this->start_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dest_lng", ::apache::thrift::protocol::T_DOUBLE, 9);
  xfer += oprot->writeDouble(this->dest_lng);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dest_lat", ::apache::thrift::protocol::T_DOUBLE, 10);
  xfer += oprot->writeDouble(this->dest_lat);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dest_name", ::apache::thrift::protocol::T_STRING, 11);
  xfer += oprot->writeString(this->dest_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("traceid", ::apache::thrift::protocol::T_STRING, 12);
  xfer += oprot->writeString(this->traceid);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.extMap) {
    xfer += oprot->writeFieldBegin("extMap", ::apache::thrift::protocol::T_MAP, 13);
    {
      xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->extMap.size()));
      std::map<std::string, std::string> ::const_iterator _iter149;
      for (_iter149 = this->extMap.begin(); _iter149 != this->extMap.end(); ++_iter149)
      {
        xfer += oprot->writeString(_iter149->first);
        xfer += oprot->writeString(_iter149->second);
      }
      xfer += oprot->writeMapEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.productReq) {
    xfer += oprot->writeFieldBegin("productReq", ::apache::thrift::protocol::T_LIST, 14);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->productReq.size()));
      std::vector<ProductType> ::const_iterator _iter150;
      for (_iter150 = this->productReq.begin(); _iter150 != this->productReq.end(); ++_iter150)
      {
        xfer += (*_iter150).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.trace_info) {
    xfer += oprot->writeFieldBegin("trace_info", ::apache::thrift::protocol::T_STRUCT, 20);
    xfer += this->trace_info.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(PrematchRecommendRequest &a, PrematchRecommendRequest &b) {
  using ::std::swap;
  swap(a.phone, b.phone);
  swap(a.pid, b.pid);
  swap(a.city_id, b.city_id);
  swap(a.cur_lng, b.cur_lng);
  swap(a.cur_lat, b.cur_lat);
  swap(a.start_lng, b.start_lng);
  swap(a.start_lat, b.start_lat);
  swap(a.start_name, b.start_name);
  swap(a.dest_lng, b.dest_lng);
  swap(a.dest_lat, b.dest_lat);
  swap(a.dest_name, b.dest_name);
  swap(a.traceid, b.traceid);
  swap(a.extMap, b.extMap);
  swap(a.productReq, b.productReq);
  swap(a.trace_info, b.trace_info);
  swap(a.__isset, b.__isset);
}

PrematchRecommendRequest::PrematchRecommendRequest(const PrematchRecommendRequest& other151) {
  phone = other151.phone;
  pid = other151.pid;
  city_id = other151.city_id;
  cur_lng = other151.cur_lng;
  cur_lat = other151.cur_lat;
  start_lng = other151.start_lng;
  start_lat = other151.start_lat;
  start_name = other151.start_name;
  dest_lng = other151.dest_lng;
  dest_lat = other151.dest_lat;
  dest_name = other151.dest_name;
  traceid = other151.traceid;
  extMap = other151.extMap;
  productReq = other151.productReq;
  trace_info = other151.trace_info;
  __isset = other151.__isset;
}
PrematchRecommendRequest& PrematchRecommendRequest::operator=(const PrematchRecommendRequest& other152) {
  phone = other152.phone;
  pid = other152.pid;
  city_id = other152.city_id;
  cur_lng = other152.cur_lng;
  cur_lat = other152.cur_lat;
  start_lng = other152.start_lng;
  start_lat = other152.start_lat;
  start_name = other152.start_name;
  dest_lng = other152.dest_lng;
  dest_lat = other152.dest_lat;
  dest_name = other152.dest_name;
  traceid = other152.traceid;
  extMap = other152.extMap;
  productReq = other152.productReq;
  trace_info = other152.trace_info;
  __isset = other152.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const PrematchRecommendRequest& obj) {
  using apache::thrift::to_string;
  out << "PrematchRecommendRequest(";
  out << "phone=" << to_string(obj.phone);
  out << ", " << "pid=" << to_string(obj.pid);
  out << ", " << "city_id=" << to_string(obj.city_id);
  out << ", " << "cur_lng=" << to_string(obj.cur_lng);
  out << ", " << "cur_lat=" << to_string(obj.cur_lat);
  out << ", " << "start_lng=" << to_string(obj.start_lng);
  out << ", " << "start_lat=" << to_string(obj.start_lat);
  out << ", " << "start_name=" << to_string(obj.start_name);
  out << ", " << "dest_lng=" << to_string(obj.dest_lng);
  out << ", " << "dest_lat=" << to_string(obj.dest_lat);
  out << ", " << "dest_name=" << to_string(obj.dest_name);
  out << ", " << "traceid=" << to_string(obj.traceid);
  out << ", " << "extMap="; (obj.__isset.extMap ? (out << to_string(obj.extMap)) : (out << "<null>"));
  out << ", " << "productReq="; (obj.__isset.productReq ? (out << to_string(obj.productReq)) : (out << "<null>"));
  out << ", " << "trace_info="; (obj.__isset.trace_info ? (out << to_string(obj.trace_info)) : (out << "<null>"));
  out << ")";
  return out;
}


PrematchRecommendResponse::~PrematchRecommendResponse() throw() {
}


void PrematchRecommendResponse::__set_error_code(const int32_t val) {
  this->error_code = val;
}

void PrematchRecommendResponse::__set_error_msg(const std::string& val) {
  this->error_msg = val;
}

void PrematchRecommendResponse::__set_holdResults(const std::vector<PrematchHoldRes> & val) {
  this->holdResults = val;
__isset.holdResults = true;
}

void PrematchRecommendResponse::__set_stationResults(const std::vector<PrematchStationRes> & val) {
  this->stationResults = val;
__isset.stationResults = true;
}

void PrematchRecommendResponse::__set_etdResults(const std::vector<PrematchEtdRes> & val) {
  this->etdResults = val;
__isset.etdResults = true;
}

void PrematchRecommendResponse::__set_extMap(const std::map<std::string, std::string> & val) {
  this->extMap = val;
__isset.extMap = true;
}

const char* PrematchRecommendResponse::ascii_fingerprint = "D6B8A30B56E8AE1F327543EE52DE027A";
const uint8_t PrematchRecommendResponse::binary_fingerprint[16] = {0xD6,0xB8,0xA3,0x0B,0x56,0xE8,0xAE,0x1F,0x32,0x75,0x43,0xEE,0x52,0xDE,0x02,0x7A};

uint32_t PrematchRecommendResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_error_code = false;
  bool isset_error_msg = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->error_code);
          isset_error_code = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->error_msg);
          isset_error_msg = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->holdResults.clear();
            uint32_t _size153;
            ::apache::thrift::protocol::TType _etype156;
            xfer += iprot->readListBegin(_etype156, _size153);
            this->holdResults.resize(_size153);
            uint32_t _i157;
            for (_i157 = 0; _i157 < _size153; ++_i157)
            {
              xfer += this->holdResults[_i157].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.holdResults = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->stationResults.clear();
            uint32_t _size158;
            ::apache::thrift::protocol::TType _etype161;
            xfer += iprot->readListBegin(_etype161, _size158);
            this->stationResults.resize(_size158);
            uint32_t _i162;
            for (_i162 = 0; _i162 < _size158; ++_i162)
            {
              xfer += this->stationResults[_i162].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.stationResults = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->etdResults.clear();
            uint32_t _size163;
            ::apache::thrift::protocol::TType _etype166;
            xfer += iprot->readListBegin(_etype166, _size163);
            this->etdResults.resize(_size163);
            uint32_t _i167;
            for (_i167 = 0; _i167 < _size163; ++_i167)
            {
              xfer += this->etdResults[_i167].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.etdResults = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->extMap.clear();
            uint32_t _size168;
            ::apache::thrift::protocol::TType _ktype169;
            ::apache::thrift::protocol::TType _vtype170;
            xfer += iprot->readMapBegin(_ktype169, _vtype170, _size168);
            uint32_t _i172;
            for (_i172 = 0; _i172 < _size168; ++_i172)
            {
              std::string _key173;
              xfer += iprot->readString(_key173);
              std::string& _val174 = this->extMap[_key173];
              xfer += iprot->readString(_val174);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.extMap = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_error_code)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_error_msg)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t PrematchRecommendResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("PrematchRecommendResponse");

  xfer += oprot->writeFieldBegin("error_code", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->error_code);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("error_msg", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->error_msg);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.holdResults) {
    xfer += oprot->writeFieldBegin("holdResults", ::apache::thrift::protocol::T_LIST, 3);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->holdResults.size()));
      std::vector<PrematchHoldRes> ::const_iterator _iter175;
      for (_iter175 = this->holdResults.begin(); _iter175 != this->holdResults.end(); ++_iter175)
      {
        xfer += (*_iter175).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.stationResults) {
    xfer += oprot->writeFieldBegin("stationResults", ::apache::thrift::protocol::T_LIST, 4);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->stationResults.size()));
      std::vector<PrematchStationRes> ::const_iterator _iter176;
      for (_iter176 = this->stationResults.begin(); _iter176 != this->stationResults.end(); ++_iter176)
      {
        xfer += (*_iter176).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.etdResults) {
    xfer += oprot->writeFieldBegin("etdResults", ::apache::thrift::protocol::T_LIST, 5);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->etdResults.size()));
      std::vector<PrematchEtdRes> ::const_iterator _iter177;
      for (_iter177 = this->etdResults.begin(); _iter177 != this->etdResults.end(); ++_iter177)
      {
        xfer += (*_iter177).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.extMap) {
    xfer += oprot->writeFieldBegin("extMap", ::apache::thrift::protocol::T_MAP, 6);
    {
      xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->extMap.size()));
      std::map<std::string, std::string> ::const_iterator _iter178;
      for (_iter178 = this->extMap.begin(); _iter178 != this->extMap.end(); ++_iter178)
      {
        xfer += oprot->writeString(_iter178->first);
        xfer += oprot->writeString(_iter178->second);
      }
      xfer += oprot->writeMapEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(PrematchRecommendResponse &a, PrematchRecommendResponse &b) {
  using ::std::swap;
  swap(a.error_code, b.error_code);
  swap(a.error_msg, b.error_msg);
  swap(a.holdResults, b.holdResults);
  swap(a.stationResults, b.stationResults);
  swap(a.etdResults, b.etdResults);
  swap(a.extMap, b.extMap);
  swap(a.__isset, b.__isset);
}

PrematchRecommendResponse::PrematchRecommendResponse(const PrematchRecommendResponse& other179) {
  error_code = other179.error_code;
  error_msg = other179.error_msg;
  holdResults = other179.holdResults;
  stationResults = other179.stationResults;
  etdResults = other179.etdResults;
  extMap = other179.extMap;
  __isset = other179.__isset;
}
PrematchRecommendResponse& PrematchRecommendResponse::operator=(const PrematchRecommendResponse& other180) {
  error_code = other180.error_code;
  error_msg = other180.error_msg;
  holdResults = other180.holdResults;
  stationResults = other180.stationResults;
  etdResults = other180.etdResults;
  extMap = other180.extMap;
  __isset = other180.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const PrematchRecommendResponse& obj) {
  using apache::thrift::to_string;
  out << "PrematchRecommendResponse(";
  out << "error_code=" << to_string(obj.error_code);
  out << ", " << "error_msg=" << to_string(obj.error_msg);
  out << ", " << "holdResults="; (obj.__isset.holdResults ? (out << to_string(obj.holdResults)) : (out << "<null>"));
  out << ", " << "stationResults="; (obj.__isset.stationResults ? (out << to_string(obj.stationResults)) : (out << "<null>"));
  out << ", " << "etdResults="; (obj.__isset.etdResults ? (out << to_string(obj.etdResults)) : (out << "<null>"));
  out << ", " << "extMap="; (obj.__isset.extMap ? (out << to_string(obj.extMap)) : (out << "<null>"));
  out << ")";
  return out;
}


CarpoolEtdRequest::~CarpoolEtdRequest() throw() {
}


void CarpoolEtdRequest::__set_trace_info(const Trace& val) {
  this->trace_info = val;
}

void CarpoolEtdRequest::__set_bubble_id(const std::string& val) {
  this->bubble_id = val;
}

void CarpoolEtdRequest::__set_express_etd(const int64_t val) {
  this->express_etd = val;
}

void CarpoolEtdRequest::__set_city_id(const int32_t val) {
  this->city_id = val;
}

void CarpoolEtdRequest::__set_phone(const std::string& val) {
  this->phone = val;
}

void CarpoolEtdRequest::__set_pid(const std::string& val) {
  this->pid = val;
}

void CarpoolEtdRequest::__set_ext_info(const std::map<std::string, std::string> & val) {
  this->ext_info = val;
__isset.ext_info = true;
}

const char* CarpoolEtdRequest::ascii_fingerprint = "9A3A2EB7C3426EC5BD0FC4177912541D";
const uint8_t CarpoolEtdRequest::binary_fingerprint[16] = {0x9A,0x3A,0x2E,0xB7,0xC3,0x42,0x6E,0xC5,0xBD,0x0F,0xC4,0x17,0x79,0x12,0x54,0x1D};

uint32_t CarpoolEtdRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_trace_info = false;
  bool isset_bubble_id = false;
  bool isset_express_etd = false;
  bool isset_city_id = false;
  bool isset_phone = false;
  bool isset_pid = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->trace_info.read(iprot);
          isset_trace_info = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->bubble_id);
          isset_bubble_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->express_etd);
          isset_express_etd = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->city_id);
          isset_city_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->phone);
          isset_phone = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->pid);
          isset_pid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->ext_info.clear();
            uint32_t _size181;
            ::apache::thrift::protocol::TType _ktype182;
            ::apache::thrift::protocol::TType _vtype183;
            xfer += iprot->readMapBegin(_ktype182, _vtype183, _size181);
            uint32_t _i185;
            for (_i185 = 0; _i185 < _size181; ++_i185)
            {
              std::string _key186;
              xfer += iprot->readString(_key186);
              std::string& _val187 = this->ext_info[_key186];
              xfer += iprot->readString(_val187);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.ext_info = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_trace_info)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_bubble_id)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_express_etd)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_city_id)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_phone)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_pid)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t CarpoolEtdRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("CarpoolEtdRequest");

  xfer += oprot->writeFieldBegin("trace_info", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->trace_info.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("bubble_id", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->bubble_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("express_etd", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->express_etd);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("city_id", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->city_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("phone", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->phone);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("pid", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->pid);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.ext_info) {
    xfer += oprot->writeFieldBegin("ext_info", ::apache::thrift::protocol::T_MAP, 7);
    {
      xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->ext_info.size()));
      std::map<std::string, std::string> ::const_iterator _iter188;
      for (_iter188 = this->ext_info.begin(); _iter188 != this->ext_info.end(); ++_iter188)
      {
        xfer += oprot->writeString(_iter188->first);
        xfer += oprot->writeString(_iter188->second);
      }
      xfer += oprot->writeMapEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(CarpoolEtdRequest &a, CarpoolEtdRequest &b) {
  using ::std::swap;
  swap(a.trace_info, b.trace_info);
  swap(a.bubble_id, b.bubble_id);
  swap(a.express_etd, b.express_etd);
  swap(a.city_id, b.city_id);
  swap(a.phone, b.phone);
  swap(a.pid, b.pid);
  swap(a.ext_info, b.ext_info);
  swap(a.__isset, b.__isset);
}

CarpoolEtdRequest::CarpoolEtdRequest(const CarpoolEtdRequest& other189) {
  trace_info = other189.trace_info;
  bubble_id = other189.bubble_id;
  express_etd = other189.express_etd;
  city_id = other189.city_id;
  phone = other189.phone;
  pid = other189.pid;
  ext_info = other189.ext_info;
  __isset = other189.__isset;
}
CarpoolEtdRequest& CarpoolEtdRequest::operator=(const CarpoolEtdRequest& other190) {
  trace_info = other190.trace_info;
  bubble_id = other190.bubble_id;
  express_etd = other190.express_etd;
  city_id = other190.city_id;
  phone = other190.phone;
  pid = other190.pid;
  ext_info = other190.ext_info;
  __isset = other190.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const CarpoolEtdRequest& obj) {
  using apache::thrift::to_string;
  out << "CarpoolEtdRequest(";
  out << "trace_info=" << to_string(obj.trace_info);
  out << ", " << "bubble_id=" << to_string(obj.bubble_id);
  out << ", " << "express_etd=" << to_string(obj.express_etd);
  out << ", " << "city_id=" << to_string(obj.city_id);
  out << ", " << "phone=" << to_string(obj.phone);
  out << ", " << "pid=" << to_string(obj.pid);
  out << ", " << "ext_info="; (obj.__isset.ext_info ? (out << to_string(obj.ext_info)) : (out << "<null>"));
  out << ")";
  return out;
}


CarpoolEtdResponse::~CarpoolEtdResponse() throw() {
}


void CarpoolEtdResponse::__set_error_code(const int32_t val) {
  this->error_code = val;
}

void CarpoolEtdResponse::__set_error_msg(const std::string& val) {
  this->error_msg = val;
}

void CarpoolEtdResponse::__set_carpool_etd(const CarpoolEtdInfo& val) {
  this->carpool_etd = val;
}

void CarpoolEtdResponse::__set_ext_info(const std::map<std::string, std::string> & val) {
  this->ext_info = val;
__isset.ext_info = true;
}

const char* CarpoolEtdResponse::ascii_fingerprint = "047202887E904B4368A0B4D880793D94";
const uint8_t CarpoolEtdResponse::binary_fingerprint[16] = {0x04,0x72,0x02,0x88,0x7E,0x90,0x4B,0x43,0x68,0xA0,0xB4,0xD8,0x80,0x79,0x3D,0x94};

uint32_t CarpoolEtdResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_error_code = false;
  bool isset_error_msg = false;
  bool isset_carpool_etd = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->error_code);
          isset_error_code = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->error_msg);
          isset_error_msg = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->carpool_etd.read(iprot);
          isset_carpool_etd = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->ext_info.clear();
            uint32_t _size191;
            ::apache::thrift::protocol::TType _ktype192;
            ::apache::thrift::protocol::TType _vtype193;
            xfer += iprot->readMapBegin(_ktype192, _vtype193, _size191);
            uint32_t _i195;
            for (_i195 = 0; _i195 < _size191; ++_i195)
            {
              std::string _key196;
              xfer += iprot->readString(_key196);
              std::string& _val197 = this->ext_info[_key196];
              xfer += iprot->readString(_val197);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.ext_info = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_error_code)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_error_msg)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_carpool_etd)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t CarpoolEtdResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("CarpoolEtdResponse");

  xfer += oprot->writeFieldBegin("error_code", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->error_code);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("error_msg", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->error_msg);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("carpool_etd", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->carpool_etd.write(oprot);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.ext_info) {
    xfer += oprot->writeFieldBegin("ext_info", ::apache::thrift::protocol::T_MAP, 4);
    {
      xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->ext_info.size()));
      std::map<std::string, std::string> ::const_iterator _iter198;
      for (_iter198 = this->ext_info.begin(); _iter198 != this->ext_info.end(); ++_iter198)
      {
        xfer += oprot->writeString(_iter198->first);
        xfer += oprot->writeString(_iter198->second);
      }
      xfer += oprot->writeMapEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(CarpoolEtdResponse &a, CarpoolEtdResponse &b) {
  using ::std::swap;
  swap(a.error_code, b.error_code);
  swap(a.error_msg, b.error_msg);
  swap(a.carpool_etd, b.carpool_etd);
  swap(a.ext_info, b.ext_info);
  swap(a.__isset, b.__isset);
}

CarpoolEtdResponse::CarpoolEtdResponse(const CarpoolEtdResponse& other199) {
  error_code = other199.error_code;
  error_msg = other199.error_msg;
  carpool_etd = other199.carpool_etd;
  ext_info = other199.ext_info;
  __isset = other199.__isset;
}
CarpoolEtdResponse& CarpoolEtdResponse::operator=(const CarpoolEtdResponse& other200) {
  error_code = other200.error_code;
  error_msg = other200.error_msg;
  carpool_etd = other200.carpool_etd;
  ext_info = other200.ext_info;
  __isset = other200.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const CarpoolEtdResponse& obj) {
  using apache::thrift::to_string;
  out << "CarpoolEtdResponse(";
  out << "error_code=" << to_string(obj.error_code);
  out << ", " << "error_msg=" << to_string(obj.error_msg);
  out << ", " << "carpool_etd=" << to_string(obj.carpool_etd);
  out << ", " << "ext_info="; (obj.__isset.ext_info ? (out << to_string(obj.ext_info)) : (out << "<null>"));
  out << ")";
  return out;
}

}} // namespace
