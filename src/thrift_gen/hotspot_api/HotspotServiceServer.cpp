// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include <thrift/TToString.h>
#include <thrift/transport/TTransport.h>
#include <thrift/transport/TBufferTransports.h>
#include <thrift/transport/TSimpleFileTransport.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/protocol/TJSONProtocol.h>
#include "simple_log.h"
#include <string.h>
#include "HotspotService.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

using namespace  ::hotspot::service;

class HotspotServiceHandler : virtual public HotspotServiceIf {
 public:
  HotspotServiceHandler() {
    // Your initialization goes here
  }

  void GetRecommendStationList(HotspotResponse& _return, const HotspotRequest& request, const Trace& trace) {
	using apache::thrift::to_string;
	using namespace std;
	log_info("HotspotServiceHandler::GetRecommendStationList||request=%s||trace=%s", to_string(request).c_str(), to_string(trace).c_str());

	string path = "/home/Shit/thrift-test/src/../data/hotspot_api/GetRecommendStationList/rsp.json";
	boost::shared_ptr<TTransport> transport(new TSimpleFileTransport(path, true, true));
	boost::shared_ptr<TProtocol> protocol(new TJSONProtocol(transport));
	_return.read(protocol.get());

	log_info("HotspotServiceHandler::GetRecommendStationList||rsp=%s", to_string(_return).c_str());
    // Your implementation goes here
    printf("GetRecommendStationList\n");
  }

  void ForecastDepartureTime(ForecastDepartureTimeResponse& _return, const ForecastDepartureTimeRequest& request) {
	using apache::thrift::to_string;
	using namespace std;
	log_info("HotspotServiceHandler::ForecastDepartureTime||request=%s", to_string(request).c_str());

	string path = "/home/Shit/thrift-test/src/../data/hotspot_api/ForecastDepartureTime/rsp.json";
	boost::shared_ptr<TTransport> transport(new TSimpleFileTransport(path, true, true));
	boost::shared_ptr<TProtocol> protocol(new TJSONProtocol(transport));
	_return.read(protocol.get());

	log_info("HotspotServiceHandler::ForecastDepartureTime||rsp=%s", to_string(_return).c_str());
    // Your implementation goes here
    printf("ForecastDepartureTime\n");
  }

  void getMatchDetail(MatchDetailResponse& _return, const MatchDetailRequest& request) {
	using apache::thrift::to_string;
	using namespace std;
	log_info("HotspotServiceHandler::getMatchDetail||request=%s", to_string(request).c_str());

	string path = "/home/Shit/thrift-test/src/../data/hotspot_api/getMatchDetail/rsp.json";
	boost::shared_ptr<TTransport> transport(new TSimpleFileTransport(path, true, true));
	boost::shared_ptr<TProtocol> protocol(new TJSONProtocol(transport));
	_return.read(protocol.get());

	log_info("HotspotServiceHandler::getMatchDetail||rsp=%s", to_string(_return).c_str());
    // Your implementation goes here
    printf("getMatchDetail\n");
  }

  void GetForecastFeature(GetForecastFeatureResponse& _return, const GetForecastFeatureRequest& request) {
	using apache::thrift::to_string;
	using namespace std;
	log_info("HotspotServiceHandler::GetForecastFeature||request=%s", to_string(request).c_str());

	string path = "/home/Shit/thrift-test/src/../data/hotspot_api/GetForecastFeature/rsp.json";
	boost::shared_ptr<TTransport> transport(new TSimpleFileTransport(path, true, true));
	boost::shared_ptr<TProtocol> protocol(new TJSONProtocol(transport));
	_return.read(protocol.get());

	log_info("HotspotServiceHandler::GetForecastFeature||rsp=%s", to_string(_return).c_str());
    // Your implementation goes here
    printf("GetForecastFeature\n");
  }

  void getPrematchhHoldInfo(PrematchhHoldInfoResponse& _return, const PrematchhHoldInfoRequest& request) {
	using apache::thrift::to_string;
	using namespace std;
	log_info("HotspotServiceHandler::getPrematchhHoldInfo||request=%s", to_string(request).c_str());

	string path = "/home/Shit/thrift-test/src/../data/hotspot_api/getPrematchhHoldInfo/rsp.json";
	boost::shared_ptr<TTransport> transport(new TSimpleFileTransport(path, true, true));
	boost::shared_ptr<TProtocol> protocol(new TJSONProtocol(transport));
	_return.read(protocol.get());

	log_info("HotspotServiceHandler::getPrematchhHoldInfo||rsp=%s", to_string(_return).c_str());
    // Your implementation goes here
    printf("getPrematchhHoldInfo\n");
  }

  void GetPrematchRecommendInfo(PrematchRecommendResponse& _return, const PrematchRecommendRequest& request) {
	using apache::thrift::to_string;
	using namespace std;
	log_info("HotspotServiceHandler::GetPrematchRecommendInfo||request=%s", to_string(request).c_str());

	string path = "/home/Shit/thrift-test/src/../data/hotspot_api/GetPrematchRecommendInfo/rsp.json";
	boost::shared_ptr<TTransport> transport(new TSimpleFileTransport(path, true, true));
	boost::shared_ptr<TProtocol> protocol(new TJSONProtocol(transport));
	_return.read(protocol.get());

	log_info("HotspotServiceHandler::GetPrematchRecommendInfo||rsp=%s", to_string(_return).c_str());
    // Your implementation goes here
    printf("GetPrematchRecommendInfo\n");
  }

  void GetEtdInfo(CarpoolEtdResponse& _return, const CarpoolEtdRequest& req) {
	using apache::thrift::to_string;
	using namespace std;
	log_info("HotspotServiceHandler::GetEtdInfo||req=%s", to_string(req).c_str());

	string path = "/home/Shit/thrift-test/src/../data/hotspot_api/GetEtdInfo/rsp.json";
	boost::shared_ptr<TTransport> transport(new TSimpleFileTransport(path, true, true));
	boost::shared_ptr<TProtocol> protocol(new TJSONProtocol(transport));
	_return.read(protocol.get());

	log_info("HotspotServiceHandler::GetEtdInfo||rsp=%s", to_string(_return).c_str());
    // Your implementation goes here
    printf("GetEtdInfo\n");
  }

};


extern "C" TSimpleServer* get_hotspot_api_server(int port)
{
	shared_ptr<HotspotServiceHandler> handler(new HotspotServiceHandler());
	shared_ptr<TProcessor> processor(new HotspotServiceProcessor(handler));
	shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
	shared_ptr<TTransportFactory> transportFactory(new (TFramedTransportFactory));
	shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

	TSimpleServer* server = new TSimpleServer(processor, serverTransport, transportFactory, protocolFactory);
	return server;
}

