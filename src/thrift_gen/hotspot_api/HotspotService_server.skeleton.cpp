// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "HotspotService.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

using namespace  ::hotspot::service;

class HotspotServiceHandler : virtual public HotspotServiceIf {
 public:
  HotspotServiceHandler() {
    // Your initialization goes here
  }

  void GetRecommendStationList(HotspotResponse& _return, const HotspotRequest& request, const Trace& trace) {
    // Your implementation goes here
    printf("GetRecommendStationList\n");
  }

  void ForecastDepartureTime(ForecastDepartureTimeResponse& _return, const ForecastDepartureTimeRequest& request) {
    // Your implementation goes here
    printf("ForecastDepartureTime\n");
  }

  void getMatchDetail(MatchDetailResponse& _return, const MatchDetailRequest& request) {
    // Your implementation goes here
    printf("getMatchDetail\n");
  }

  void GetForecastFeature(GetForecastFeatureResponse& _return, const GetForecastFeatureRequest& request) {
    // Your implementation goes here
    printf("GetForecastFeature\n");
  }

  void getPrematchhHoldInfo(PrematchhHoldInfoResponse& _return, const PrematchhHoldInfoRequest& request) {
    // Your implementation goes here
    printf("getPrematchhHoldInfo\n");
  }

  void GetPrematchRecommendInfo(PrematchRecommendResponse& _return, const PrematchRecommendRequest& request) {
    // Your implementation goes here
    printf("GetPrematchRecommendInfo\n");
  }

  void GetEtdInfo(CarpoolEtdResponse& _return, const CarpoolEtdRequest& req) {
    // Your implementation goes here
    printf("GetEtdInfo\n");
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  shared_ptr<HotspotServiceHandler> handler(new HotspotServiceHandler());
  shared_ptr<TProcessor> processor(new HotspotServiceProcessor(handler));
  shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

