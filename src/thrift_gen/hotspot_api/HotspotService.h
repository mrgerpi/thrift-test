/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef HotspotService_H
#define HotspotService_H

#include <thrift/TDispatchProcessor.h>
#include "hotspot_api_types.h"

namespace hotspot { namespace service {

class HotspotServiceIf {
 public:
  virtual ~HotspotServiceIf() {}
  virtual void GetRecommendStationList(HotspotResponse& _return, const HotspotRequest& request) = 0;
  virtual void ForecastDepartureTime(ForecastDepartureTimeResponse& _return, const ForecastDepartureTimeRequest& request) = 0;
  virtual void getMatchDetail(MatchDetailResponse& _return, const MatchDetailRequest& request) = 0;
  virtual void GetForecastFeature(GetForecastFeatureResponse& _return, const GetForecastFeatureRequest& request) = 0;
  virtual void getPrematchhHoldInfo(PrematchhHoldInfoResponse& _return, const PrematchhHoldInfoRequest& request) = 0;
  virtual void GetPrematchRecommendInfo(PrematchRecommendResponse& _return, const PrematchRecommendRequest& request) = 0;
  virtual void GetEtdInfo(CarpoolEtdResponse& _return, const CarpoolEtdRequest& req) = 0;
};

class HotspotServiceIfFactory {
 public:
  typedef HotspotServiceIf Handler;

  virtual ~HotspotServiceIfFactory() {}

  virtual HotspotServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(HotspotServiceIf* /* handler */) = 0;
};

class HotspotServiceIfSingletonFactory : virtual public HotspotServiceIfFactory {
 public:
  HotspotServiceIfSingletonFactory(const boost::shared_ptr<HotspotServiceIf>& iface) : iface_(iface) {}
  virtual ~HotspotServiceIfSingletonFactory() {}

  virtual HotspotServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(HotspotServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<HotspotServiceIf> iface_;
};

class HotspotServiceNull : virtual public HotspotServiceIf {
 public:
  virtual ~HotspotServiceNull() {}
  void GetRecommendStationList(HotspotResponse& /* _return */, const HotspotRequest& /* request */) {
    return;
  }
  void ForecastDepartureTime(ForecastDepartureTimeResponse& /* _return */, const ForecastDepartureTimeRequest& /* request */) {
    return;
  }
  void getMatchDetail(MatchDetailResponse& /* _return */, const MatchDetailRequest& /* request */) {
    return;
  }
  void GetForecastFeature(GetForecastFeatureResponse& /* _return */, const GetForecastFeatureRequest& /* request */) {
    return;
  }
  void getPrematchhHoldInfo(PrematchhHoldInfoResponse& /* _return */, const PrematchhHoldInfoRequest& /* request */) {
    return;
  }
  void GetPrematchRecommendInfo(PrematchRecommendResponse& /* _return */, const PrematchRecommendRequest& /* request */) {
    return;
  }
  void GetEtdInfo(CarpoolEtdResponse& /* _return */, const CarpoolEtdRequest& /* req */) {
    return;
  }
};

typedef struct _HotspotService_GetRecommendStationList_args__isset {
  _HotspotService_GetRecommendStationList_args__isset() : request(false) {}
  bool request :1;
} _HotspotService_GetRecommendStationList_args__isset;

class HotspotService_GetRecommendStationList_args {
 public:

  static const char* ascii_fingerprint; // = "51EE272590B89A9A7A61D573E14D74C2";
  static const uint8_t binary_fingerprint[16]; // = {0x51,0xEE,0x27,0x25,0x90,0xB8,0x9A,0x9A,0x7A,0x61,0xD5,0x73,0xE1,0x4D,0x74,0xC2};

  HotspotService_GetRecommendStationList_args(const HotspotService_GetRecommendStationList_args&);
  HotspotService_GetRecommendStationList_args& operator=(const HotspotService_GetRecommendStationList_args&);
  HotspotService_GetRecommendStationList_args() {
  }

  virtual ~HotspotService_GetRecommendStationList_args() throw();
  HotspotRequest request;

  _HotspotService_GetRecommendStationList_args__isset __isset;

  void __set_request(const HotspotRequest& val);

  bool operator == (const HotspotService_GetRecommendStationList_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const HotspotService_GetRecommendStationList_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HotspotService_GetRecommendStationList_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const HotspotService_GetRecommendStationList_args& obj);
};


class HotspotService_GetRecommendStationList_pargs {
 public:

  static const char* ascii_fingerprint; // = "51EE272590B89A9A7A61D573E14D74C2";
  static const uint8_t binary_fingerprint[16]; // = {0x51,0xEE,0x27,0x25,0x90,0xB8,0x9A,0x9A,0x7A,0x61,0xD5,0x73,0xE1,0x4D,0x74,0xC2};


  virtual ~HotspotService_GetRecommendStationList_pargs() throw();
  const HotspotRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const HotspotService_GetRecommendStationList_pargs& obj);
};

typedef struct _HotspotService_GetRecommendStationList_result__isset {
  _HotspotService_GetRecommendStationList_result__isset() : success(false) {}
  bool success :1;
} _HotspotService_GetRecommendStationList_result__isset;

class HotspotService_GetRecommendStationList_result {
 public:

  static const char* ascii_fingerprint; // = "2379F1EFA731F24ED8A647753A095F3E";
  static const uint8_t binary_fingerprint[16]; // = {0x23,0x79,0xF1,0xEF,0xA7,0x31,0xF2,0x4E,0xD8,0xA6,0x47,0x75,0x3A,0x09,0x5F,0x3E};

  HotspotService_GetRecommendStationList_result(const HotspotService_GetRecommendStationList_result&);
  HotspotService_GetRecommendStationList_result& operator=(const HotspotService_GetRecommendStationList_result&);
  HotspotService_GetRecommendStationList_result() {
  }

  virtual ~HotspotService_GetRecommendStationList_result() throw();
  HotspotResponse success;

  _HotspotService_GetRecommendStationList_result__isset __isset;

  void __set_success(const HotspotResponse& val);

  bool operator == (const HotspotService_GetRecommendStationList_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const HotspotService_GetRecommendStationList_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HotspotService_GetRecommendStationList_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const HotspotService_GetRecommendStationList_result& obj);
};

typedef struct _HotspotService_GetRecommendStationList_presult__isset {
  _HotspotService_GetRecommendStationList_presult__isset() : success(false) {}
  bool success :1;
} _HotspotService_GetRecommendStationList_presult__isset;

class HotspotService_GetRecommendStationList_presult {
 public:

  static const char* ascii_fingerprint; // = "2379F1EFA731F24ED8A647753A095F3E";
  static const uint8_t binary_fingerprint[16]; // = {0x23,0x79,0xF1,0xEF,0xA7,0x31,0xF2,0x4E,0xD8,0xA6,0x47,0x75,0x3A,0x09,0x5F,0x3E};


  virtual ~HotspotService_GetRecommendStationList_presult() throw();
  HotspotResponse* success;

  _HotspotService_GetRecommendStationList_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const HotspotService_GetRecommendStationList_presult& obj);
};

typedef struct _HotspotService_ForecastDepartureTime_args__isset {
  _HotspotService_ForecastDepartureTime_args__isset() : request(false) {}
  bool request :1;
} _HotspotService_ForecastDepartureTime_args__isset;

class HotspotService_ForecastDepartureTime_args {
 public:

  static const char* ascii_fingerprint; // = "18847CBC4A0F060C4ACD38C9E0722AE3";
  static const uint8_t binary_fingerprint[16]; // = {0x18,0x84,0x7C,0xBC,0x4A,0x0F,0x06,0x0C,0x4A,0xCD,0x38,0xC9,0xE0,0x72,0x2A,0xE3};

  HotspotService_ForecastDepartureTime_args(const HotspotService_ForecastDepartureTime_args&);
  HotspotService_ForecastDepartureTime_args& operator=(const HotspotService_ForecastDepartureTime_args&);
  HotspotService_ForecastDepartureTime_args() {
  }

  virtual ~HotspotService_ForecastDepartureTime_args() throw();
  ForecastDepartureTimeRequest request;

  _HotspotService_ForecastDepartureTime_args__isset __isset;

  void __set_request(const ForecastDepartureTimeRequest& val);

  bool operator == (const HotspotService_ForecastDepartureTime_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const HotspotService_ForecastDepartureTime_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HotspotService_ForecastDepartureTime_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const HotspotService_ForecastDepartureTime_args& obj);
};


class HotspotService_ForecastDepartureTime_pargs {
 public:

  static const char* ascii_fingerprint; // = "18847CBC4A0F060C4ACD38C9E0722AE3";
  static const uint8_t binary_fingerprint[16]; // = {0x18,0x84,0x7C,0xBC,0x4A,0x0F,0x06,0x0C,0x4A,0xCD,0x38,0xC9,0xE0,0x72,0x2A,0xE3};


  virtual ~HotspotService_ForecastDepartureTime_pargs() throw();
  const ForecastDepartureTimeRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const HotspotService_ForecastDepartureTime_pargs& obj);
};

typedef struct _HotspotService_ForecastDepartureTime_result__isset {
  _HotspotService_ForecastDepartureTime_result__isset() : success(false) {}
  bool success :1;
} _HotspotService_ForecastDepartureTime_result__isset;

class HotspotService_ForecastDepartureTime_result {
 public:

  static const char* ascii_fingerprint; // = "5378E9A38D2684D0E9D7E83780A6E0B8";
  static const uint8_t binary_fingerprint[16]; // = {0x53,0x78,0xE9,0xA3,0x8D,0x26,0x84,0xD0,0xE9,0xD7,0xE8,0x37,0x80,0xA6,0xE0,0xB8};

  HotspotService_ForecastDepartureTime_result(const HotspotService_ForecastDepartureTime_result&);
  HotspotService_ForecastDepartureTime_result& operator=(const HotspotService_ForecastDepartureTime_result&);
  HotspotService_ForecastDepartureTime_result() {
  }

  virtual ~HotspotService_ForecastDepartureTime_result() throw();
  ForecastDepartureTimeResponse success;

  _HotspotService_ForecastDepartureTime_result__isset __isset;

  void __set_success(const ForecastDepartureTimeResponse& val);

  bool operator == (const HotspotService_ForecastDepartureTime_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const HotspotService_ForecastDepartureTime_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HotspotService_ForecastDepartureTime_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const HotspotService_ForecastDepartureTime_result& obj);
};

typedef struct _HotspotService_ForecastDepartureTime_presult__isset {
  _HotspotService_ForecastDepartureTime_presult__isset() : success(false) {}
  bool success :1;
} _HotspotService_ForecastDepartureTime_presult__isset;

class HotspotService_ForecastDepartureTime_presult {
 public:

  static const char* ascii_fingerprint; // = "5378E9A38D2684D0E9D7E83780A6E0B8";
  static const uint8_t binary_fingerprint[16]; // = {0x53,0x78,0xE9,0xA3,0x8D,0x26,0x84,0xD0,0xE9,0xD7,0xE8,0x37,0x80,0xA6,0xE0,0xB8};


  virtual ~HotspotService_ForecastDepartureTime_presult() throw();
  ForecastDepartureTimeResponse* success;

  _HotspotService_ForecastDepartureTime_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const HotspotService_ForecastDepartureTime_presult& obj);
};

typedef struct _HotspotService_getMatchDetail_args__isset {
  _HotspotService_getMatchDetail_args__isset() : request(false) {}
  bool request :1;
} _HotspotService_getMatchDetail_args__isset;

class HotspotService_getMatchDetail_args {
 public:

  static const char* ascii_fingerprint; // = "C14346450181C8F342B197CB69530A2C";
  static const uint8_t binary_fingerprint[16]; // = {0xC1,0x43,0x46,0x45,0x01,0x81,0xC8,0xF3,0x42,0xB1,0x97,0xCB,0x69,0x53,0x0A,0x2C};

  HotspotService_getMatchDetail_args(const HotspotService_getMatchDetail_args&);
  HotspotService_getMatchDetail_args& operator=(const HotspotService_getMatchDetail_args&);
  HotspotService_getMatchDetail_args() {
  }

  virtual ~HotspotService_getMatchDetail_args() throw();
  MatchDetailRequest request;

  _HotspotService_getMatchDetail_args__isset __isset;

  void __set_request(const MatchDetailRequest& val);

  bool operator == (const HotspotService_getMatchDetail_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const HotspotService_getMatchDetail_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HotspotService_getMatchDetail_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const HotspotService_getMatchDetail_args& obj);
};


class HotspotService_getMatchDetail_pargs {
 public:

  static const char* ascii_fingerprint; // = "C14346450181C8F342B197CB69530A2C";
  static const uint8_t binary_fingerprint[16]; // = {0xC1,0x43,0x46,0x45,0x01,0x81,0xC8,0xF3,0x42,0xB1,0x97,0xCB,0x69,0x53,0x0A,0x2C};


  virtual ~HotspotService_getMatchDetail_pargs() throw();
  const MatchDetailRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const HotspotService_getMatchDetail_pargs& obj);
};

typedef struct _HotspotService_getMatchDetail_result__isset {
  _HotspotService_getMatchDetail_result__isset() : success(false) {}
  bool success :1;
} _HotspotService_getMatchDetail_result__isset;

class HotspotService_getMatchDetail_result {
 public:

  static const char* ascii_fingerprint; // = "AABFD027BABBB7930CDD4DA943389A30";
  static const uint8_t binary_fingerprint[16]; // = {0xAA,0xBF,0xD0,0x27,0xBA,0xBB,0xB7,0x93,0x0C,0xDD,0x4D,0xA9,0x43,0x38,0x9A,0x30};

  HotspotService_getMatchDetail_result(const HotspotService_getMatchDetail_result&);
  HotspotService_getMatchDetail_result& operator=(const HotspotService_getMatchDetail_result&);
  HotspotService_getMatchDetail_result() {
  }

  virtual ~HotspotService_getMatchDetail_result() throw();
  MatchDetailResponse success;

  _HotspotService_getMatchDetail_result__isset __isset;

  void __set_success(const MatchDetailResponse& val);

  bool operator == (const HotspotService_getMatchDetail_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const HotspotService_getMatchDetail_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HotspotService_getMatchDetail_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const HotspotService_getMatchDetail_result& obj);
};

typedef struct _HotspotService_getMatchDetail_presult__isset {
  _HotspotService_getMatchDetail_presult__isset() : success(false) {}
  bool success :1;
} _HotspotService_getMatchDetail_presult__isset;

class HotspotService_getMatchDetail_presult {
 public:

  static const char* ascii_fingerprint; // = "AABFD027BABBB7930CDD4DA943389A30";
  static const uint8_t binary_fingerprint[16]; // = {0xAA,0xBF,0xD0,0x27,0xBA,0xBB,0xB7,0x93,0x0C,0xDD,0x4D,0xA9,0x43,0x38,0x9A,0x30};


  virtual ~HotspotService_getMatchDetail_presult() throw();
  MatchDetailResponse* success;

  _HotspotService_getMatchDetail_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const HotspotService_getMatchDetail_presult& obj);
};

typedef struct _HotspotService_GetForecastFeature_args__isset {
  _HotspotService_GetForecastFeature_args__isset() : request(false) {}
  bool request :1;
} _HotspotService_GetForecastFeature_args__isset;

class HotspotService_GetForecastFeature_args {
 public:

  static const char* ascii_fingerprint; // = "9A8D79678A457ABA25B356089618CB17";
  static const uint8_t binary_fingerprint[16]; // = {0x9A,0x8D,0x79,0x67,0x8A,0x45,0x7A,0xBA,0x25,0xB3,0x56,0x08,0x96,0x18,0xCB,0x17};

  HotspotService_GetForecastFeature_args(const HotspotService_GetForecastFeature_args&);
  HotspotService_GetForecastFeature_args& operator=(const HotspotService_GetForecastFeature_args&);
  HotspotService_GetForecastFeature_args() {
  }

  virtual ~HotspotService_GetForecastFeature_args() throw();
  GetForecastFeatureRequest request;

  _HotspotService_GetForecastFeature_args__isset __isset;

  void __set_request(const GetForecastFeatureRequest& val);

  bool operator == (const HotspotService_GetForecastFeature_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const HotspotService_GetForecastFeature_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HotspotService_GetForecastFeature_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const HotspotService_GetForecastFeature_args& obj);
};


class HotspotService_GetForecastFeature_pargs {
 public:

  static const char* ascii_fingerprint; // = "9A8D79678A457ABA25B356089618CB17";
  static const uint8_t binary_fingerprint[16]; // = {0x9A,0x8D,0x79,0x67,0x8A,0x45,0x7A,0xBA,0x25,0xB3,0x56,0x08,0x96,0x18,0xCB,0x17};


  virtual ~HotspotService_GetForecastFeature_pargs() throw();
  const GetForecastFeatureRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const HotspotService_GetForecastFeature_pargs& obj);
};

typedef struct _HotspotService_GetForecastFeature_result__isset {
  _HotspotService_GetForecastFeature_result__isset() : success(false) {}
  bool success :1;
} _HotspotService_GetForecastFeature_result__isset;

class HotspotService_GetForecastFeature_result {
 public:

  static const char* ascii_fingerprint; // = "9DB31814639E913716A8B966387A703C";
  static const uint8_t binary_fingerprint[16]; // = {0x9D,0xB3,0x18,0x14,0x63,0x9E,0x91,0x37,0x16,0xA8,0xB9,0x66,0x38,0x7A,0x70,0x3C};

  HotspotService_GetForecastFeature_result(const HotspotService_GetForecastFeature_result&);
  HotspotService_GetForecastFeature_result& operator=(const HotspotService_GetForecastFeature_result&);
  HotspotService_GetForecastFeature_result() {
  }

  virtual ~HotspotService_GetForecastFeature_result() throw();
  GetForecastFeatureResponse success;

  _HotspotService_GetForecastFeature_result__isset __isset;

  void __set_success(const GetForecastFeatureResponse& val);

  bool operator == (const HotspotService_GetForecastFeature_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const HotspotService_GetForecastFeature_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HotspotService_GetForecastFeature_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const HotspotService_GetForecastFeature_result& obj);
};

typedef struct _HotspotService_GetForecastFeature_presult__isset {
  _HotspotService_GetForecastFeature_presult__isset() : success(false) {}
  bool success :1;
} _HotspotService_GetForecastFeature_presult__isset;

class HotspotService_GetForecastFeature_presult {
 public:

  static const char* ascii_fingerprint; // = "9DB31814639E913716A8B966387A703C";
  static const uint8_t binary_fingerprint[16]; // = {0x9D,0xB3,0x18,0x14,0x63,0x9E,0x91,0x37,0x16,0xA8,0xB9,0x66,0x38,0x7A,0x70,0x3C};


  virtual ~HotspotService_GetForecastFeature_presult() throw();
  GetForecastFeatureResponse* success;

  _HotspotService_GetForecastFeature_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const HotspotService_GetForecastFeature_presult& obj);
};

typedef struct _HotspotService_getPrematchhHoldInfo_args__isset {
  _HotspotService_getPrematchhHoldInfo_args__isset() : request(false) {}
  bool request :1;
} _HotspotService_getPrematchhHoldInfo_args__isset;

class HotspotService_getPrematchhHoldInfo_args {
 public:

  static const char* ascii_fingerprint; // = "7A9D928D9CC2BE1A72390CDC9B26864E";
  static const uint8_t binary_fingerprint[16]; // = {0x7A,0x9D,0x92,0x8D,0x9C,0xC2,0xBE,0x1A,0x72,0x39,0x0C,0xDC,0x9B,0x26,0x86,0x4E};

  HotspotService_getPrematchhHoldInfo_args(const HotspotService_getPrematchhHoldInfo_args&);
  HotspotService_getPrematchhHoldInfo_args& operator=(const HotspotService_getPrematchhHoldInfo_args&);
  HotspotService_getPrematchhHoldInfo_args() {
  }

  virtual ~HotspotService_getPrematchhHoldInfo_args() throw();
  PrematchhHoldInfoRequest request;

  _HotspotService_getPrematchhHoldInfo_args__isset __isset;

  void __set_request(const PrematchhHoldInfoRequest& val);

  bool operator == (const HotspotService_getPrematchhHoldInfo_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const HotspotService_getPrematchhHoldInfo_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HotspotService_getPrematchhHoldInfo_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const HotspotService_getPrematchhHoldInfo_args& obj);
};


class HotspotService_getPrematchhHoldInfo_pargs {
 public:

  static const char* ascii_fingerprint; // = "7A9D928D9CC2BE1A72390CDC9B26864E";
  static const uint8_t binary_fingerprint[16]; // = {0x7A,0x9D,0x92,0x8D,0x9C,0xC2,0xBE,0x1A,0x72,0x39,0x0C,0xDC,0x9B,0x26,0x86,0x4E};


  virtual ~HotspotService_getPrematchhHoldInfo_pargs() throw();
  const PrematchhHoldInfoRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const HotspotService_getPrematchhHoldInfo_pargs& obj);
};

typedef struct _HotspotService_getPrematchhHoldInfo_result__isset {
  _HotspotService_getPrematchhHoldInfo_result__isset() : success(false) {}
  bool success :1;
} _HotspotService_getPrematchhHoldInfo_result__isset;

class HotspotService_getPrematchhHoldInfo_result {
 public:

  static const char* ascii_fingerprint; // = "32F92721C4E348F2EF2D42A03227E799";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0xF9,0x27,0x21,0xC4,0xE3,0x48,0xF2,0xEF,0x2D,0x42,0xA0,0x32,0x27,0xE7,0x99};

  HotspotService_getPrematchhHoldInfo_result(const HotspotService_getPrematchhHoldInfo_result&);
  HotspotService_getPrematchhHoldInfo_result& operator=(const HotspotService_getPrematchhHoldInfo_result&);
  HotspotService_getPrematchhHoldInfo_result() {
  }

  virtual ~HotspotService_getPrematchhHoldInfo_result() throw();
  PrematchhHoldInfoResponse success;

  _HotspotService_getPrematchhHoldInfo_result__isset __isset;

  void __set_success(const PrematchhHoldInfoResponse& val);

  bool operator == (const HotspotService_getPrematchhHoldInfo_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const HotspotService_getPrematchhHoldInfo_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HotspotService_getPrematchhHoldInfo_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const HotspotService_getPrematchhHoldInfo_result& obj);
};

typedef struct _HotspotService_getPrematchhHoldInfo_presult__isset {
  _HotspotService_getPrematchhHoldInfo_presult__isset() : success(false) {}
  bool success :1;
} _HotspotService_getPrematchhHoldInfo_presult__isset;

class HotspotService_getPrematchhHoldInfo_presult {
 public:

  static const char* ascii_fingerprint; // = "32F92721C4E348F2EF2D42A03227E799";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0xF9,0x27,0x21,0xC4,0xE3,0x48,0xF2,0xEF,0x2D,0x42,0xA0,0x32,0x27,0xE7,0x99};


  virtual ~HotspotService_getPrematchhHoldInfo_presult() throw();
  PrematchhHoldInfoResponse* success;

  _HotspotService_getPrematchhHoldInfo_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const HotspotService_getPrematchhHoldInfo_presult& obj);
};

typedef struct _HotspotService_GetPrematchRecommendInfo_args__isset {
  _HotspotService_GetPrematchRecommendInfo_args__isset() : request(false) {}
  bool request :1;
} _HotspotService_GetPrematchRecommendInfo_args__isset;

class HotspotService_GetPrematchRecommendInfo_args {
 public:

  static const char* ascii_fingerprint; // = "7A9D928D9CC2BE1A72390CDC9B26864E";
  static const uint8_t binary_fingerprint[16]; // = {0x7A,0x9D,0x92,0x8D,0x9C,0xC2,0xBE,0x1A,0x72,0x39,0x0C,0xDC,0x9B,0x26,0x86,0x4E};

  HotspotService_GetPrematchRecommendInfo_args(const HotspotService_GetPrematchRecommendInfo_args&);
  HotspotService_GetPrematchRecommendInfo_args& operator=(const HotspotService_GetPrematchRecommendInfo_args&);
  HotspotService_GetPrematchRecommendInfo_args() {
  }

  virtual ~HotspotService_GetPrematchRecommendInfo_args() throw();
  PrematchRecommendRequest request;

  _HotspotService_GetPrematchRecommendInfo_args__isset __isset;

  void __set_request(const PrematchRecommendRequest& val);

  bool operator == (const HotspotService_GetPrematchRecommendInfo_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const HotspotService_GetPrematchRecommendInfo_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HotspotService_GetPrematchRecommendInfo_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const HotspotService_GetPrematchRecommendInfo_args& obj);
};


class HotspotService_GetPrematchRecommendInfo_pargs {
 public:

  static const char* ascii_fingerprint; // = "7A9D928D9CC2BE1A72390CDC9B26864E";
  static const uint8_t binary_fingerprint[16]; // = {0x7A,0x9D,0x92,0x8D,0x9C,0xC2,0xBE,0x1A,0x72,0x39,0x0C,0xDC,0x9B,0x26,0x86,0x4E};


  virtual ~HotspotService_GetPrematchRecommendInfo_pargs() throw();
  const PrematchRecommendRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const HotspotService_GetPrematchRecommendInfo_pargs& obj);
};

typedef struct _HotspotService_GetPrematchRecommendInfo_result__isset {
  _HotspotService_GetPrematchRecommendInfo_result__isset() : success(false) {}
  bool success :1;
} _HotspotService_GetPrematchRecommendInfo_result__isset;

class HotspotService_GetPrematchRecommendInfo_result {
 public:

  static const char* ascii_fingerprint; // = "E91BE18E93F7C5B6C8F7528C223B1B51";
  static const uint8_t binary_fingerprint[16]; // = {0xE9,0x1B,0xE1,0x8E,0x93,0xF7,0xC5,0xB6,0xC8,0xF7,0x52,0x8C,0x22,0x3B,0x1B,0x51};

  HotspotService_GetPrematchRecommendInfo_result(const HotspotService_GetPrematchRecommendInfo_result&);
  HotspotService_GetPrematchRecommendInfo_result& operator=(const HotspotService_GetPrematchRecommendInfo_result&);
  HotspotService_GetPrematchRecommendInfo_result() {
  }

  virtual ~HotspotService_GetPrematchRecommendInfo_result() throw();
  PrematchRecommendResponse success;

  _HotspotService_GetPrematchRecommendInfo_result__isset __isset;

  void __set_success(const PrematchRecommendResponse& val);

  bool operator == (const HotspotService_GetPrematchRecommendInfo_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const HotspotService_GetPrematchRecommendInfo_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HotspotService_GetPrematchRecommendInfo_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const HotspotService_GetPrematchRecommendInfo_result& obj);
};

typedef struct _HotspotService_GetPrematchRecommendInfo_presult__isset {
  _HotspotService_GetPrematchRecommendInfo_presult__isset() : success(false) {}
  bool success :1;
} _HotspotService_GetPrematchRecommendInfo_presult__isset;

class HotspotService_GetPrematchRecommendInfo_presult {
 public:

  static const char* ascii_fingerprint; // = "E91BE18E93F7C5B6C8F7528C223B1B51";
  static const uint8_t binary_fingerprint[16]; // = {0xE9,0x1B,0xE1,0x8E,0x93,0xF7,0xC5,0xB6,0xC8,0xF7,0x52,0x8C,0x22,0x3B,0x1B,0x51};


  virtual ~HotspotService_GetPrematchRecommendInfo_presult() throw();
  PrematchRecommendResponse* success;

  _HotspotService_GetPrematchRecommendInfo_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const HotspotService_GetPrematchRecommendInfo_presult& obj);
};

typedef struct _HotspotService_GetEtdInfo_args__isset {
  _HotspotService_GetEtdInfo_args__isset() : req(false) {}
  bool req :1;
} _HotspotService_GetEtdInfo_args__isset;

class HotspotService_GetEtdInfo_args {
 public:

  static const char* ascii_fingerprint; // = "960D39A2A6E378797DF477B8BA0D9597";
  static const uint8_t binary_fingerprint[16]; // = {0x96,0x0D,0x39,0xA2,0xA6,0xE3,0x78,0x79,0x7D,0xF4,0x77,0xB8,0xBA,0x0D,0x95,0x97};

  HotspotService_GetEtdInfo_args(const HotspotService_GetEtdInfo_args&);
  HotspotService_GetEtdInfo_args& operator=(const HotspotService_GetEtdInfo_args&);
  HotspotService_GetEtdInfo_args() {
  }

  virtual ~HotspotService_GetEtdInfo_args() throw();
  CarpoolEtdRequest req;

  _HotspotService_GetEtdInfo_args__isset __isset;

  void __set_req(const CarpoolEtdRequest& val);

  bool operator == (const HotspotService_GetEtdInfo_args & rhs) const
  {
    if (!(req == rhs.req))
      return false;
    return true;
  }
  bool operator != (const HotspotService_GetEtdInfo_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HotspotService_GetEtdInfo_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const HotspotService_GetEtdInfo_args& obj);
};


class HotspotService_GetEtdInfo_pargs {
 public:

  static const char* ascii_fingerprint; // = "960D39A2A6E378797DF477B8BA0D9597";
  static const uint8_t binary_fingerprint[16]; // = {0x96,0x0D,0x39,0xA2,0xA6,0xE3,0x78,0x79,0x7D,0xF4,0x77,0xB8,0xBA,0x0D,0x95,0x97};


  virtual ~HotspotService_GetEtdInfo_pargs() throw();
  const CarpoolEtdRequest* req;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const HotspotService_GetEtdInfo_pargs& obj);
};

typedef struct _HotspotService_GetEtdInfo_result__isset {
  _HotspotService_GetEtdInfo_result__isset() : success(false) {}
  bool success :1;
} _HotspotService_GetEtdInfo_result__isset;

class HotspotService_GetEtdInfo_result {
 public:

  static const char* ascii_fingerprint; // = "4F98B172EA1EE16D29BD4DB4E12DF3CF";
  static const uint8_t binary_fingerprint[16]; // = {0x4F,0x98,0xB1,0x72,0xEA,0x1E,0xE1,0x6D,0x29,0xBD,0x4D,0xB4,0xE1,0x2D,0xF3,0xCF};

  HotspotService_GetEtdInfo_result(const HotspotService_GetEtdInfo_result&);
  HotspotService_GetEtdInfo_result& operator=(const HotspotService_GetEtdInfo_result&);
  HotspotService_GetEtdInfo_result() {
  }

  virtual ~HotspotService_GetEtdInfo_result() throw();
  CarpoolEtdResponse success;

  _HotspotService_GetEtdInfo_result__isset __isset;

  void __set_success(const CarpoolEtdResponse& val);

  bool operator == (const HotspotService_GetEtdInfo_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const HotspotService_GetEtdInfo_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HotspotService_GetEtdInfo_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const HotspotService_GetEtdInfo_result& obj);
};

typedef struct _HotspotService_GetEtdInfo_presult__isset {
  _HotspotService_GetEtdInfo_presult__isset() : success(false) {}
  bool success :1;
} _HotspotService_GetEtdInfo_presult__isset;

class HotspotService_GetEtdInfo_presult {
 public:

  static const char* ascii_fingerprint; // = "4F98B172EA1EE16D29BD4DB4E12DF3CF";
  static const uint8_t binary_fingerprint[16]; // = {0x4F,0x98,0xB1,0x72,0xEA,0x1E,0xE1,0x6D,0x29,0xBD,0x4D,0xB4,0xE1,0x2D,0xF3,0xCF};


  virtual ~HotspotService_GetEtdInfo_presult() throw();
  CarpoolEtdResponse* success;

  _HotspotService_GetEtdInfo_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const HotspotService_GetEtdInfo_presult& obj);
};

class HotspotServiceClient : virtual public HotspotServiceIf {
 public:
  HotspotServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  HotspotServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void GetRecommendStationList(HotspotResponse& _return, const HotspotRequest& request);
  void send_GetRecommendStationList(const HotspotRequest& request);
  void recv_GetRecommendStationList(HotspotResponse& _return);
  void ForecastDepartureTime(ForecastDepartureTimeResponse& _return, const ForecastDepartureTimeRequest& request);
  void send_ForecastDepartureTime(const ForecastDepartureTimeRequest& request);
  void recv_ForecastDepartureTime(ForecastDepartureTimeResponse& _return);
  void getMatchDetail(MatchDetailResponse& _return, const MatchDetailRequest& request);
  void send_getMatchDetail(const MatchDetailRequest& request);
  void recv_getMatchDetail(MatchDetailResponse& _return);
  void GetForecastFeature(GetForecastFeatureResponse& _return, const GetForecastFeatureRequest& request);
  void send_GetForecastFeature(const GetForecastFeatureRequest& request);
  void recv_GetForecastFeature(GetForecastFeatureResponse& _return);
  void getPrematchhHoldInfo(PrematchhHoldInfoResponse& _return, const PrematchhHoldInfoRequest& request);
  void send_getPrematchhHoldInfo(const PrematchhHoldInfoRequest& request);
  void recv_getPrematchhHoldInfo(PrematchhHoldInfoResponse& _return);
  void GetPrematchRecommendInfo(PrematchRecommendResponse& _return, const PrematchRecommendRequest& request);
  void send_GetPrematchRecommendInfo(const PrematchRecommendRequest& request);
  void recv_GetPrematchRecommendInfo(PrematchRecommendResponse& _return);
  void GetEtdInfo(CarpoolEtdResponse& _return, const CarpoolEtdRequest& req);
  void send_GetEtdInfo(const CarpoolEtdRequest& req);
  void recv_GetEtdInfo(CarpoolEtdResponse& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class HotspotServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<HotspotServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (HotspotServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_GetRecommendStationList(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_ForecastDepartureTime(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getMatchDetail(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetForecastFeature(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getPrematchhHoldInfo(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetPrematchRecommendInfo(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetEtdInfo(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  HotspotServiceProcessor(boost::shared_ptr<HotspotServiceIf> iface) :
    iface_(iface) {
    processMap_["GetRecommendStationList"] = &HotspotServiceProcessor::process_GetRecommendStationList;
    processMap_["ForecastDepartureTime"] = &HotspotServiceProcessor::process_ForecastDepartureTime;
    processMap_["getMatchDetail"] = &HotspotServiceProcessor::process_getMatchDetail;
    processMap_["GetForecastFeature"] = &HotspotServiceProcessor::process_GetForecastFeature;
    processMap_["getPrematchhHoldInfo"] = &HotspotServiceProcessor::process_getPrematchhHoldInfo;
    processMap_["GetPrematchRecommendInfo"] = &HotspotServiceProcessor::process_GetPrematchRecommendInfo;
    processMap_["GetEtdInfo"] = &HotspotServiceProcessor::process_GetEtdInfo;
  }

  virtual ~HotspotServiceProcessor() {}
};

class HotspotServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  HotspotServiceProcessorFactory(const ::boost::shared_ptr< HotspotServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< HotspotServiceIfFactory > handlerFactory_;
};

class HotspotServiceMultiface : virtual public HotspotServiceIf {
 public:
  HotspotServiceMultiface(std::vector<boost::shared_ptr<HotspotServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~HotspotServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<HotspotServiceIf> > ifaces_;
  HotspotServiceMultiface() {}
  void add(boost::shared_ptr<HotspotServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void GetRecommendStationList(HotspotResponse& _return, const HotspotRequest& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetRecommendStationList(_return, request);
    }
    ifaces_[i]->GetRecommendStationList(_return, request);
    return;
  }

  void ForecastDepartureTime(ForecastDepartureTimeResponse& _return, const ForecastDepartureTimeRequest& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ForecastDepartureTime(_return, request);
    }
    ifaces_[i]->ForecastDepartureTime(_return, request);
    return;
  }

  void getMatchDetail(MatchDetailResponse& _return, const MatchDetailRequest& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getMatchDetail(_return, request);
    }
    ifaces_[i]->getMatchDetail(_return, request);
    return;
  }

  void GetForecastFeature(GetForecastFeatureResponse& _return, const GetForecastFeatureRequest& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetForecastFeature(_return, request);
    }
    ifaces_[i]->GetForecastFeature(_return, request);
    return;
  }

  void getPrematchhHoldInfo(PrematchhHoldInfoResponse& _return, const PrematchhHoldInfoRequest& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getPrematchhHoldInfo(_return, request);
    }
    ifaces_[i]->getPrematchhHoldInfo(_return, request);
    return;
  }

  void GetPrematchRecommendInfo(PrematchRecommendResponse& _return, const PrematchRecommendRequest& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetPrematchRecommendInfo(_return, request);
    }
    ifaces_[i]->GetPrematchRecommendInfo(_return, request);
    return;
  }

  void GetEtdInfo(CarpoolEtdResponse& _return, const CarpoolEtdRequest& req) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetEtdInfo(_return, req);
    }
    ifaces_[i]->GetEtdInfo(_return, req);
    return;
  }

};

}} // namespace

#endif
