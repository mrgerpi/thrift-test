// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include <thrift/TToString.h>
#include <thrift/transport/TTransport.h>
#include <thrift/transport/TBufferTransports.h>
#include <thrift/transport/TSimpleFileTransport.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/protocol/TJSONProtocol.h>
#include "simple_log.h"
#include <string.h>
#include "CalculatorService.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

using namespace  ::calculator;

class CalculatorServiceHandler : virtual public CalculatorServiceIf {
 public:
  CalculatorServiceHandler() {
    // Your initialization goes here
  }

  void Calculate(CalculateResponse& _return, const CalculateRequest& req) {
	using apache::thrift::to_string;
	using namespace std;
	log_info("CalculatorServiceHandler::Calculate||req=%s", to_string(req).c_str());

	string path = "/home/Shit/thrift-test/src/../data/calculate/Calculate/rsp.json";
	boost::shared_ptr<TTransport> transport(new TSimpleFileTransport(path, true, true));
	boost::shared_ptr<TProtocol> protocol(new TJSONProtocol(transport));
	_return.read(protocol.get());

	log_info("CalculatorServiceHandler::Calculate||rsp=%s", to_string(_return).c_str());
    // Your implementation goes here
    printf("Calculate\n");
  }

};


extern "C" TSimpleServer* get_calculate_server(int port)
{
	shared_ptr<CalculatorServiceHandler> handler(new CalculatorServiceHandler());
	shared_ptr<TProcessor> processor(new CalculatorServiceProcessor(handler));
	shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
	shared_ptr<TTransportFactory> transportFactory(new (TFramedTransportFactory));
	shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

	TSimpleServer* server = new TSimpleServer(processor, serverTransport, transportFactory, protocolFactory);
	return server;
}

