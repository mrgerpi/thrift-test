/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef CalculatorService_H
#define CalculatorService_H

#include <thrift/TDispatchProcessor.h>
#include "calculate_types.h"

namespace calculator {

class CalculatorServiceIf {
 public:
  virtual ~CalculatorServiceIf() {}
  virtual void Calculate(CalculateResponse& _return, const CalculateRequest& req) = 0;
};

class CalculatorServiceIfFactory {
 public:
  typedef CalculatorServiceIf Handler;

  virtual ~CalculatorServiceIfFactory() {}

  virtual CalculatorServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(CalculatorServiceIf* /* handler */) = 0;
};

class CalculatorServiceIfSingletonFactory : virtual public CalculatorServiceIfFactory {
 public:
  CalculatorServiceIfSingletonFactory(const boost::shared_ptr<CalculatorServiceIf>& iface) : iface_(iface) {}
  virtual ~CalculatorServiceIfSingletonFactory() {}

  virtual CalculatorServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(CalculatorServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<CalculatorServiceIf> iface_;
};

class CalculatorServiceNull : virtual public CalculatorServiceIf {
 public:
  virtual ~CalculatorServiceNull() {}
  void Calculate(CalculateResponse& /* _return */, const CalculateRequest& /* req */) {
    return;
  }
};

typedef struct _CalculatorService_Calculate_args__isset {
  _CalculatorService_Calculate_args__isset() : req(false) {}
  bool req :1;
} _CalculatorService_Calculate_args__isset;

class CalculatorService_Calculate_args {
 public:

  static const char* ascii_fingerprint; // = "D340F36C58B35542947645C6F23A4FCC";
  static const uint8_t binary_fingerprint[16]; // = {0xD3,0x40,0xF3,0x6C,0x58,0xB3,0x55,0x42,0x94,0x76,0x45,0xC6,0xF2,0x3A,0x4F,0xCC};

  CalculatorService_Calculate_args(const CalculatorService_Calculate_args&);
  CalculatorService_Calculate_args& operator=(const CalculatorService_Calculate_args&);
  CalculatorService_Calculate_args() {
  }

  virtual ~CalculatorService_Calculate_args() throw();
  CalculateRequest req;

  _CalculatorService_Calculate_args__isset __isset;

  void __set_req(const CalculateRequest& val);

  bool operator == (const CalculatorService_Calculate_args & rhs) const
  {
    if (!(req == rhs.req))
      return false;
    return true;
  }
  bool operator != (const CalculatorService_Calculate_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CalculatorService_Calculate_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const CalculatorService_Calculate_args& obj);
};


class CalculatorService_Calculate_pargs {
 public:

  static const char* ascii_fingerprint; // = "D340F36C58B35542947645C6F23A4FCC";
  static const uint8_t binary_fingerprint[16]; // = {0xD3,0x40,0xF3,0x6C,0x58,0xB3,0x55,0x42,0x94,0x76,0x45,0xC6,0xF2,0x3A,0x4F,0xCC};


  virtual ~CalculatorService_Calculate_pargs() throw();
  const CalculateRequest* req;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const CalculatorService_Calculate_pargs& obj);
};

typedef struct _CalculatorService_Calculate_result__isset {
  _CalculatorService_Calculate_result__isset() : success(false) {}
  bool success :1;
} _CalculatorService_Calculate_result__isset;

class CalculatorService_Calculate_result {
 public:

  static const char* ascii_fingerprint; // = "215C261FE424362FF87724B464DEF2DC";
  static const uint8_t binary_fingerprint[16]; // = {0x21,0x5C,0x26,0x1F,0xE4,0x24,0x36,0x2F,0xF8,0x77,0x24,0xB4,0x64,0xDE,0xF2,0xDC};

  CalculatorService_Calculate_result(const CalculatorService_Calculate_result&);
  CalculatorService_Calculate_result& operator=(const CalculatorService_Calculate_result&);
  CalculatorService_Calculate_result() {
  }

  virtual ~CalculatorService_Calculate_result() throw();
  CalculateResponse success;

  _CalculatorService_Calculate_result__isset __isset;

  void __set_success(const CalculateResponse& val);

  bool operator == (const CalculatorService_Calculate_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CalculatorService_Calculate_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CalculatorService_Calculate_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const CalculatorService_Calculate_result& obj);
};

typedef struct _CalculatorService_Calculate_presult__isset {
  _CalculatorService_Calculate_presult__isset() : success(false) {}
  bool success :1;
} _CalculatorService_Calculate_presult__isset;

class CalculatorService_Calculate_presult {
 public:

  static const char* ascii_fingerprint; // = "215C261FE424362FF87724B464DEF2DC";
  static const uint8_t binary_fingerprint[16]; // = {0x21,0x5C,0x26,0x1F,0xE4,0x24,0x36,0x2F,0xF8,0x77,0x24,0xB4,0x64,0xDE,0xF2,0xDC};


  virtual ~CalculatorService_Calculate_presult() throw();
  CalculateResponse* success;

  _CalculatorService_Calculate_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const CalculatorService_Calculate_presult& obj);
};

class CalculatorServiceClient : virtual public CalculatorServiceIf {
 public:
  CalculatorServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  CalculatorServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void Calculate(CalculateResponse& _return, const CalculateRequest& req);
  void send_Calculate(const CalculateRequest& req);
  void recv_Calculate(CalculateResponse& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class CalculatorServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<CalculatorServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (CalculatorServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_Calculate(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  CalculatorServiceProcessor(boost::shared_ptr<CalculatorServiceIf> iface) :
    iface_(iface) {
    processMap_["Calculate"] = &CalculatorServiceProcessor::process_Calculate;
  }

  virtual ~CalculatorServiceProcessor() {}
};

class CalculatorServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  CalculatorServiceProcessorFactory(const ::boost::shared_ptr< CalculatorServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< CalculatorServiceIfFactory > handlerFactory_;
};

class CalculatorServiceMultiface : virtual public CalculatorServiceIf {
 public:
  CalculatorServiceMultiface(std::vector<boost::shared_ptr<CalculatorServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~CalculatorServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<CalculatorServiceIf> > ifaces_;
  CalculatorServiceMultiface() {}
  void add(boost::shared_ptr<CalculatorServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void Calculate(CalculateResponse& _return, const CalculateRequest& req) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Calculate(_return, req);
    }
    ifaces_[i]->Calculate(_return, req);
    return;
  }

};

} // namespace

#endif
